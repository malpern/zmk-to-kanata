============================= test session starts ==============================
platform darwin -- Python 3.10.16, pytest-8.3.4, pluggy-1.5.0 -- /Users/malpern/.pyenv/versions/3.10.16/bin/python3.10
cachedir: .pytest_cache
rootdir: /Volumes/FlashGordon/Dropbox/code/nicktokatana
configfile: pyproject.toml
plugins: anyio-4.7.0
collecting ... collected 8 items

tests/test_dts_parser.py::test_parse_simple_keymap FAILED                [ 12%]
tests/test_dts_parser.py::test_parse_large_keymap FAILED                 [ 25%]
tests/test_dts_parser.py::test_parse_simple_dts PASSED                   [ 37%]
tests/test_dts_parser.py::test_parse_with_labels PASSED                  [ 50%]
tests/test_dts_parser.py::test_parse_complex_bindings PASSED             [ 62%]
tests/test_dts_parser.py::test_parse_error_handling PASSED               [ 75%]
tests/test_dts_parser.py::test_parse_invalid_content PASSED              [ 87%]
tests/test_dts_parser.py::test_find_node PASSED                          [100%]

=================================== FAILURES ===================================
___________________________ test_parse_simple_keymap ___________________________

    def test_parse_simple_keymap():
        """Test parsing a simple keymap."""
        fixtures_dir = os.path.join(os.path.dirname(__file__), "fixtures", "dts")
    
        preprocessor = DtsPreprocessor(
            include_paths=[os.path.join(fixtures_dir, "include")]
        )
        parser = DtsParser()
    
        input_file = os.path.join(fixtures_dir, "simple_keymap.zmk")
        preprocessed = preprocessor.preprocess(input_file)
        print("\nPreprocessed content:")
        print(preprocessed)
>       root = parser.parse(preprocessed)

tests/test_dts_parser.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
converter/dts/parser.py:44: in parse
    self._tokenize(content)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <converter.dts.parser.DtsParser object at 0x1044ba1d0>
content = '\n\n\n\n\n\n\n/ {\n    chosen {\n        zmk,matrix_transform = &default_transform;\n    };\n\n    default_transform:...        &kp 0x04 &kp 0x05 &kp 0x06\n                &kp 0x07 &kp 0x08 &kp 0x09\n            >;\n        };\n    };\n};'

    def _tokenize(self, content: str) -> None:
        """Tokenize DTS content and build line/column map.
    
        Args:
            content: DTS content string
    
        Raises:
            DtsParseError: If string or array is unterminated
        """
        # Remove comments first
        try:
            content = self._remove_comments(content)
        except Exception as e:
            raise DtsParseError(
                f"Failed to process comments: {str(e)}",
                context=format_error_context(content, 1, 1),
            )
    
        current = ""
        in_string = False
        line = 1
        column = 1
        i = 0
        while i < len(content):
            char = content[i]
            # Track line and column
            if char == "\n":
                line += 1
                column = 1
            else:
                column += 1
    
            if char == '"':
                if not in_string:
                    if current.strip():
                        tokens = current.strip().split()
                        self.tokens.extend(tokens)
                        for _ in tokens:
                            self.line_map.append((line, column - len(current)))
                    current = char
                else:
                    current += char
                    self.tokens.append(current)
                    self.line_map.append((line, column - len(current)))
                    current = ""
                in_string = not in_string
                i += 1
            elif char == "<" and not in_string:
                if current.strip():
                    tokens = current.strip().split()
                    self.tokens.extend(tokens)
                    for _ in tokens:
                        self.line_map.append((line, column - len(current)))
                    current = ""
                # Start collecting the array as a single token
                start_i = i
                start_line = line
                start_col = column
                depth = 1
                i += 1
                while i < len(content) and depth > 0:
                    c = content[i]
                    if c == "<":
                        depth += 1
                    elif c == ">":
                        depth -= 1
                    if c == "\n":
                        line += 1
                        column = 1
                    else:
                        column += 1
                    i += 1
                if depth != 0:
>                   raise DtsParseError(
                        "Unterminated array",
                        line=start_line,
                        column=start_col,
                        context=format_error_context(content, start_line, start_col),
                    )
E                   converter.dts.error_handler.DtsParseError: Unterminated array at line 17, column 16
E                   
E                   15 |         rows = <0x1F >;
E                   16 |         columns = <0x20 >;
E                   17 |         map = <
E                      |                ^
E                   18 |             ((0) << 0x25  | (0)) ((0) << 0x25  | (1)) ((0) << 0x25  | (2))
E                   19 |             ((1) << 0x25  | (0)) ((1) << 0x25  | (1)) ((1) << 0x25  | (2))
E                   
E                   Help: Check the DTS syntax and ensure it follows the specification.

converter/dts/parser.py:163: DtsParseError
----------------------------- Captured stdout call -----------------------------
[DtsPreprocessor] ENVIRONMENT:
  MallocNanoZone=0
  USER=malpern
  SECURITYSESSIONID=186a3
  COMMAND_MODE=unix2003
  __CFBundleIdentifier=com.todesktop.230313mzl4w4u92
  PATH=/Users/malpern/.curs....cache/lm-studio/bin
  LOGNAME=malpern
  SSH_AUTH_SOCK=/private/tmp/com.app...x1qskoux7b/Listeners
  HOME=/Users/malpern
  SHELL=/bin/zsh
  TMPDIR=/var/folders/0s/42v7...1cdnx0vrvyr0000gn/T/
  LaunchInstanceID=BFD4BF06-15BD-4F76-8D8A-1AEC50E6795A
  __CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0
  XPC_SERVICE_NAME=0
  XPC_FLAGS=0x0
  ORIGINAL_XDG_CURRENT_DESKTOP=undefined
  CURSOR_TRACE_ID=f5e099fd466543c5a0d391e03a641e89
  SHLVL=1
  PWD=/Volumes/FlashGordon...ox/code/nicktokatana
  OLDPWD=/Volumes/FlashGordon...ox/code/nicktokatana
  HOMEBREW_PREFIX=/opt/homebrew
  HOMEBREW_CELLAR=/opt/homebrew/Cellar
  HOMEBREW_REPOSITORY=/opt/homebrew
  INFOPATH=/opt/homebrew/share/...homebrew/share/info:
  YOUR_CONSUMER_KEY=ah6HAffNJRCv4xNrV4OZcVIrQ
  YOUR_CONSUMER_SECRET=EXM9IzH9IEdE2yJf0t5F...DPuFXLk55DwB8pLRswR5
  YOUR_ACCESS_TOKEN=1483-5UbadNrxZUkJpAp...JSXPVSxtsPwJyrUrZvcO
  YOUR_ACCESS_TOKEN_SECRET=jeyyEWPHAgoS0ebKus4t...0jH2T3gRCIz3dsYXQwqS
  YOUR_BEARER_TOKEN=AAAAAAAAAAAAAAAAAAAA...8YVAWCOQu6Pyu4yhuY0a
  OPENAI_API_KEY=sk-qVQDNdwpfPhrAvFr9...ob362AQbhWVa3p95yD28
  ANTHROPIC_API_KEY=sk-ant-api03-Tq7nYRm...SCuUoAfwIQg-NWFWuAAA
  TAVILY_API_KEY=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
  BING_SUBSCRIPTION_KEY=bec8ded0f34a421ba60cc3bd4626825e
  EDITOR=vi
  ZSH=/Users/malpern/.oh-my-zsh
  PAGER=head -n 10000 | cat
  LESS=-R
  LSCOLORS=Gxfxcxdxbxegedabagacad
  LS_COLORS=di=1;36:ln=35:so=32:...46:tw=30;42:ow=30;43
  PYENV_ROOT=/Users/malpern/.pyenv
  PYENV_SHELL=zsh
  DISABLE_AUTO_UPDATE=true
  TERM_PROGRAM=vscode
  TERM_PROGRAM_VERSION=0.50.1
  LANG=en_US.UTF-8
  COLORTERM=truecolor
  GIT_ASKPASS=/Applications/Cursor.../git/dist/askpass.sh
  VSCODE_GIT_ASKPASS_NODE=/Applications/Cursor...rsor Helper (Plugin)
  VSCODE_GIT_ASKPASS_EXTRA_ARGS=
  VSCODE_GIT_ASKPASS_MAIN=/Applications/Cursor...dist/askpass-main.js
  VSCODE_GIT_IPC_HANDLE=/var/folders/0s/42v7...-git-14a5ce3e7f.sock
  PYENV_VERSION=3.10.16
  PYENV_DIR=/
  VIRTUAL_ENV=/Volumes/Flash Gordo...e/nicktokatana/.venv
  PYENV_HOOK_PATH=/Users/malpern/.pyen.../usr/lib/pyenv/hooks
  VIRTUAL_ENV_PROMPT=.venv
  VSCODE_INJECTION=1
  ZDOTDIR=/Users/malpern
  USER_ZDOTDIR=/Users/malpern
  TERM=xterm-256color
  PS1=.venv%(?:%{[01;32m%...} $(git_prompt_info)
  PYTHONPATH=.
  _=/Users/malpern/.pyen...s/3.10.16/bin/pytest
  PYTEST_VERSION=8.3.4
  PYTEST_CURRENT_TEST=tests/test_dts_parse...simple_keymap (call)
[DtsPreprocessor] Temp file: /var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmpgofeg4fy.dts
[DtsPreprocessor] Temp file contents:
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
    };

    default_transform: matrix_transform {
        compatible = "zmk,matrix-transform";
        rows = <2>;
        columns = <3>;
        map = <
            RC(0,0) RC(0,1) RC(0,2)
            RC(1,0) RC(1,1) RC(1,2)
        >;
    };

    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            bindings = <
                &kp A &kp B &kp C
                &kp D &kp E &kp F
            >;
        };
    };
}; 
[DtsPreprocessor] cpp command: ['/usr/bin/clang', '-E', '-nostdinc', '-undef', '-x', 'assembler-with-cpp', '-I', '/Volumes/FlashGordon/Dropbox/code/nicktokatana/tests/fixtures/dts/include', '/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmpgofeg4fy.dts']

Preprocessed content:
# 0x1E /* 1 */ "/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmpgofeg4fy.dts"
# 0x1E /* 1 */ "<built-in>" 0x1E /* 1 */
# 0x1E /* 1 */ "<built-in>" 0x20 /* 3 */






# 0x1E /* 1 */ "<command line>" 0x1E /* 1 */
# 0x1E /* 1 */ "<built-in>" 0x1F /* 2 */
# 0x1E /* 1 */ "/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmpgofeg4fy.dts" 0x1F /* 2 */
# 0x1E /* 1 */ "/Volumes/FlashGordon/Dropbox/code/nicktokatana/tests/fixtures/dts/include/dt-bindings/zmk/keys.h" 0x1E /* 1 */
# 0x1F /* 2 */ "/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmpgofeg4fy.dts" 0x1F /* 2 */
# 0x1E /* 1 */ "/Volumes/FlashGordon/Dropbox/code/nicktokatana/tests/fixtures/dts/include/dt-bindings/zmk/matrix_transform.h" 0x1E /* 1 */
# 0x20 /* 3 */ "/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmpgofeg4fy.dts" 0x1F /* 2 */

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
    };

    default_transform: matrix_transform {
        compatible = "zmk,matrix-transform";
        rows = <0x1F /* 2 */>;
        columns = <0x20 /* 3 */>;
        map = <
            ((0) << 0x25 /* 8 */ | (0)) ((0) << 0x25 /* 8 */ | (1)) ((0) << 0x25 /* 8 */ | (2))
            ((1) << 0x25 /* 8 */ | (0)) ((1) << 0x25 /* 8 */ | (1)) ((1) << 0x25 /* 8 */ | (2))
        >;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp 0x04 &kp 0x05 &kp 0x06
                &kp 0x07 &kp 0x08 &kp 0x09
            >;
        };
    };
};

___________________________ test_parse_large_keymap ____________________________

    def test_parse_large_keymap():
        """Test parsing a larger keymap."""
        fixtures_dir = os.path.join(os.path.dirname(__file__), "fixtures", "dts")
    
        preprocessor = DtsPreprocessor(
            include_paths=[os.path.join(fixtures_dir, "include")]
        )
        parser = DtsParser()
    
        input_file = os.path.join(fixtures_dir, "large_keymap.zmk")
        preprocessed = preprocessor.preprocess(input_file)
        print("\nPreprocessed content:")
        print(preprocessed)
>       root = parser.parse(preprocessed)

tests/test_dts_parser.py:59: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
converter/dts/parser.py:44: in parse
    self._tokenize(content)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <converter.dts.parser.DtsParser object at 0x10417bbe0>
content = '\n\n\n\n\n\n\n/ {\n    chosen {\n        zmk,matrix_transform = &default_transform;\n    };\n\n    default_transform:...              &kp 0x13  */ &kp 0x14  */ &kp 0x15  */ &kp 0x16  */ &kp 0x17  */\n            >;\n        };\n    };\n};'

    def _tokenize(self, content: str) -> None:
        """Tokenize DTS content and build line/column map.
    
        Args:
            content: DTS content string
    
        Raises:
            DtsParseError: If string or array is unterminated
        """
        # Remove comments first
        try:
            content = self._remove_comments(content)
        except Exception as e:
            raise DtsParseError(
                f"Failed to process comments: {str(e)}",
                context=format_error_context(content, 1, 1),
            )
    
        current = ""
        in_string = False
        line = 1
        column = 1
        i = 0
        while i < len(content):
            char = content[i]
            # Track line and column
            if char == "\n":
                line += 1
                column = 1
            else:
                column += 1
    
            if char == '"':
                if not in_string:
                    if current.strip():
                        tokens = current.strip().split()
                        self.tokens.extend(tokens)
                        for _ in tokens:
                            self.line_map.append((line, column - len(current)))
                    current = char
                else:
                    current += char
                    self.tokens.append(current)
                    self.line_map.append((line, column - len(current)))
                    current = ""
                in_string = not in_string
                i += 1
            elif char == "<" and not in_string:
                if current.strip():
                    tokens = current.strip().split()
                    self.tokens.extend(tokens)
                    for _ in tokens:
                        self.line_map.append((line, column - len(current)))
                    current = ""
                # Start collecting the array as a single token
                start_i = i
                start_line = line
                start_col = column
                depth = 1
                i += 1
                while i < len(content) and depth > 0:
                    c = content[i]
                    if c == "<":
                        depth += 1
                    elif c == ">":
                        depth -= 1
                    if c == "\n":
                        line += 1
                        column = 1
                    else:
                        column += 1
                    i += 1
                if depth != 0:
>                   raise DtsParseError(
                        "Unterminated array",
                        line=start_line,
                        column=start_col,
                        context=format_error_context(content, start_line, start_col),
                    )
E                   converter.dts.error_handler.DtsParseError: Unterminated array at line 17, column 16
E                   
E                   15 |         rows = <0x21 >;
E                   16 |         columns = <0x22 >;
E                   17 |         map = <
E                      |                ^
E                   18 |             ((0) << 0x25  | (0)) ((0) << 0x25  | (1)) ((0) << 0x25  | (2)) ((0) << 0x25  | (3)) ((0) << 0x25  | (4))
E                   19 |             ((1) << 0x25  | (0)) ((1) << 0x25  | (1)) ((1) << 0x25  | (2)) ((1) << 0x25  | (3)) ((1) << 0x25  | (4))
E                   
E                   Help: Check the DTS syntax and ensure it follows the specification.

converter/dts/parser.py:163: DtsParseError
----------------------------- Captured stdout call -----------------------------
[DtsPreprocessor] ENVIRONMENT:
  MallocNanoZone=0
  USER=malpern
  SECURITYSESSIONID=186a3
  COMMAND_MODE=unix2003
  __CFBundleIdentifier=com.todesktop.230313mzl4w4u92
  PATH=/Users/malpern/.curs....cache/lm-studio/bin
  LOGNAME=malpern
  SSH_AUTH_SOCK=/private/tmp/com.app...x1qskoux7b/Listeners
  HOME=/Users/malpern
  SHELL=/bin/zsh
  TMPDIR=/var/folders/0s/42v7...1cdnx0vrvyr0000gn/T/
  LaunchInstanceID=BFD4BF06-15BD-4F76-8D8A-1AEC50E6795A
  __CF_USER_TEXT_ENCODING=0x1F5:0x0:0x0
  XPC_SERVICE_NAME=0
  XPC_FLAGS=0x0
  ORIGINAL_XDG_CURRENT_DESKTOP=undefined
  CURSOR_TRACE_ID=f5e099fd466543c5a0d391e03a641e89
  SHLVL=1
  PWD=/Volumes/FlashGordon...ox/code/nicktokatana
  OLDPWD=/Volumes/FlashGordon...ox/code/nicktokatana
  HOMEBREW_PREFIX=/opt/homebrew
  HOMEBREW_CELLAR=/opt/homebrew/Cellar
  HOMEBREW_REPOSITORY=/opt/homebrew
  INFOPATH=/opt/homebrew/share/...homebrew/share/info:
  YOUR_CONSUMER_KEY=ah6HAffNJRCv4xNrV4OZcVIrQ
  YOUR_CONSUMER_SECRET=EXM9IzH9IEdE2yJf0t5F...DPuFXLk55DwB8pLRswR5
  YOUR_ACCESS_TOKEN=1483-5UbadNrxZUkJpAp...JSXPVSxtsPwJyrUrZvcO
  YOUR_ACCESS_TOKEN_SECRET=jeyyEWPHAgoS0ebKus4t...0jH2T3gRCIz3dsYXQwqS
  YOUR_BEARER_TOKEN=AAAAAAAAAAAAAAAAAAAA...8YVAWCOQu6Pyu4yhuY0a
  OPENAI_API_KEY=sk-qVQDNdwpfPhrAvFr9...ob362AQbhWVa3p95yD28
  ANTHROPIC_API_KEY=sk-ant-api03-Tq7nYRm...SCuUoAfwIQg-NWFWuAAA
  TAVILY_API_KEY=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
  BING_SUBSCRIPTION_KEY=bec8ded0f34a421ba60cc3bd4626825e
  EDITOR=vi
  ZSH=/Users/malpern/.oh-my-zsh
  PAGER=head -n 10000 | cat
  LESS=-R
  LSCOLORS=Gxfxcxdxbxegedabagacad
  LS_COLORS=di=1;36:ln=35:so=32:...46:tw=30;42:ow=30;43
  PYENV_ROOT=/Users/malpern/.pyenv
  PYENV_SHELL=zsh
  DISABLE_AUTO_UPDATE=true
  TERM_PROGRAM=vscode
  TERM_PROGRAM_VERSION=0.50.1
  LANG=en_US.UTF-8
  COLORTERM=truecolor
  GIT_ASKPASS=/Applications/Cursor.../git/dist/askpass.sh
  VSCODE_GIT_ASKPASS_NODE=/Applications/Cursor...rsor Helper (Plugin)
  VSCODE_GIT_ASKPASS_EXTRA_ARGS=
  VSCODE_GIT_ASKPASS_MAIN=/Applications/Cursor...dist/askpass-main.js
  VSCODE_GIT_IPC_HANDLE=/var/folders/0s/42v7...-git-14a5ce3e7f.sock
  PYENV_VERSION=3.10.16
  PYENV_DIR=/
  VIRTUAL_ENV=/Volumes/Flash Gordo...e/nicktokatana/.venv
  PYENV_HOOK_PATH=/Users/malpern/.pyen.../usr/lib/pyenv/hooks
  VIRTUAL_ENV_PROMPT=.venv
  VSCODE_INJECTION=1
  ZDOTDIR=/Users/malpern
  USER_ZDOTDIR=/Users/malpern
  TERM=xterm-256color
  PS1=.venv%(?:%{[01;32m%...} $(git_prompt_info)
  PYTHONPATH=.
  _=/Users/malpern/.pyen...s/3.10.16/bin/pytest
  PYTEST_VERSION=8.3.4
  PYTEST_CURRENT_TEST=tests/test_dts_parse..._large_keymap (call)
[DtsPreprocessor] Temp file: /var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmp_ebf979h.dts
[DtsPreprocessor] Temp file contents:
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
    };

    default_transform: matrix_transform {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <5>;
        map = <
            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4)
            RC(3,0) RC(3,1) RC(3,2) RC(3,3) RC(3,4)
        >;
    };

    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            bindings = <
                &kp A &kp B &kp C &kp D &kp E
                &kp F &kp G &kp H &kp I &kp J
                &kp K &kp L &kp M &kp N &kp O
                &kp P &kp Q &kp R &kp S &kp T
            >;
        };
    };
}; 
[DtsPreprocessor] cpp command: ['/usr/bin/clang', '-E', '-nostdinc', '-undef', '-x', 'assembler-with-cpp', '-I', '/Volumes/FlashGordon/Dropbox/code/nicktokatana/tests/fixtures/dts/include', '/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmp_ebf979h.dts']

Preprocessed content:
# 0x1E /* 1 */ "/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmp_ebf979h.dts"
# 0x1E /* 1 */ "<built-in>" 0x1E /* 1 */
# 0x1E /* 1 */ "<built-in>" 0x20 /* 3 */






# 0x1E /* 1 */ "<command line>" 0x1E /* 1 */
# 0x1E /* 1 */ "<built-in>" 0x1F /* 2 */
# 0x1E /* 1 */ "/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmp_ebf979h.dts" 0x1F /* 2 */
# 0x1E /* 1 */ "/Volumes/FlashGordon/Dropbox/code/nicktokatana/tests/fixtures/dts/include/dt-bindings/zmk/keys.h" 0x1E /* 1 */
# 0x1F /* 2 */ "/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmp_ebf979h.dts" 0x1F /* 2 */
# 0x1E /* 1 */ "/Volumes/FlashGordon/Dropbox/code/nicktokatana/tests/fixtures/dts/include/dt-bindings/zmk/matrix_transform.h" 0x1E /* 1 */
# 0x20 /* 3 */ "/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmp_ebf979h.dts" 0x1F /* 2 */

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
    };

    default_transform: matrix_transform {
        compatible = "zmk,matrix-transform";
        rows = <0x21 /* 4 */>;
        columns = <0x22 /* 5 */>;
        map = <
            ((0) << 0x25 /* 8 */ | (0)) ((0) << 0x25 /* 8 */ | (1)) ((0) << 0x25 /* 8 */ | (2)) ((0) << 0x25 /* 8 */ | (3)) ((0) << 0x25 /* 8 */ | (4))
            ((1) << 0x25 /* 8 */ | (0)) ((1) << 0x25 /* 8 */ | (1)) ((1) << 0x25 /* 8 */ | (2)) ((1) << 0x25 /* 8 */ | (3)) ((1) << 0x25 /* 8 */ | (4))
            ((2) << 0x25 /* 8 */ | (0)) ((2) << 0x25 /* 8 */ | (1)) ((2) << 0x25 /* 8 */ | (2)) ((2) << 0x25 /* 8 */ | (3)) ((2) << 0x25 /* 8 */ | (4))
            ((3) << 0x25 /* 8 */ | (0)) ((3) << 0x25 /* 8 */ | (1)) ((3) << 0x25 /* 8 */ | (2)) ((3) << 0x25 /* 8 */ | (3)) ((3) << 0x25 /* 8 */ | (4))
        >;
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp 0x04 &kp 0x05 &kp 0x06 &kp 0x07 &kp 0x08
                &kp 0x09 &kp 0x0A /* 0x0A /* G */ */ &kp 0x0B /* 0x0B /* H */ */ &kp 0x0C /* 0x0C /* I */ */ &kp 0x0D /* 0x0D /* J */ */
                &kp 0x0E /* 0x0E /* K */ */ &kp 0x0F /* 0x0F /* L */ */ &kp 0x10 /* 0x10 /* M */ */ &kp 0x11 /* 0x11 /* N */ */ &kp 0x12 /* 0x12 /* O */ */
                &kp 0x13 /* 0x13 /* P */ */ &kp 0x14 /* 0x14 /* Q */ */ &kp 0x15 /* 0x15 /* R */ */ &kp 0x16 /* 0x16 /* S */ */ &kp 0x17 /* 0x17 /* T */ */
            >;
        };
    };
};

=========================== short test summary info ============================
FAILED tests/test_dts_parser.py::test_parse_simple_keymap - converter.dts.err...
FAILED tests/test_dts_parser.py::test_parse_large_keymap - converter.dts.erro...
========================= 2 failed, 6 passed in 0.07s ==========================
