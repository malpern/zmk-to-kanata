============================= test session starts ==============================
platform darwin -- Python 3.10.16, pytest-8.3.4, pluggy-1.5.0 -- /Users/malpern/.pyenv/versions/3.10.16/bin/python3.10
cachedir: .pytest_cache
rootdir: /Volumes/FlashGordon/Dropbox/code/nicktokatana
configfile: pyproject.toml
plugins: anyio-4.7.0
collecting ... collected 6 items

tests/dts/test_end_to_end.py::test_simple_keymap PASSED                  [ 16%]
tests/dts/test_end_to_end.py::test_complex_keymap_with_behaviors PASSED  [ 33%]
tests/dts/test_end_to_end.py::test_keymap_with_unicode PASSED            [ 50%]
tests/dts/test_end_to_end.py::test_error_handling FAILED                 [ 66%]
tests/dts/test_end_to_end.py::test_keymap_with_combos PASSED             [ 83%]
tests/dts/test_end_to_end.py::test_keymap_with_conditional_layers PASSED [100%]

=================================== FAILURES ===================================
_____________________________ test_error_handling ______________________________

    def test_error_handling():
        """Test error handling with malformed input."""
        # Test missing root node
        with pytest.raises(DtsParseError, match="DTS must start with root node"):
            parser = DtsParser()
            parser.parse("keymap { };")
    
        # Test invalid property assignment
        with pytest.raises(DtsParseError, match="Invalid property value"):
            parser = DtsParser()
            parser.parse(
                """
            / {
                keymap {
                    prop = value
                };
            };
            """
            )
    
        # Test invalid binding format
        parser = DtsParser()
        ast = parser.parse(
            """
        / {
            keymap {
                default_layer {
                    bindings = <&invalid_binding>;
                };
            };
        };
        """
        )
        extractor = KeymapExtractor()
        with pytest.raises(ValueError, match="Invalid binding format"):
>           extractor.extract(ast)

tests/dts/test_end_to_end.py:261: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
converter/dts/extractor.py:77: in extract
    self._extract_layers(keymap_node)
converter/dts/extractor.py:300: in _extract_layers
    layer = self._create_layer(child, idx)
converter/dts/extractor.py:319: in _create_layer
    parsed_bindings = self._parse_bindings(bindings_prop.value)
converter/dts/extractor.py:362: in _parse_bindings
    bindings.append(self._create_binding([behavior_name] + params))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <converter.dts.extractor.KeymapExtractor object at 0x1024bca90>
value = ['invalid_binding']

    def _create_binding(self, value: str | List[str]) -> Binding:
        """Create a binding instance from a value."""
        if isinstance(value, list):
            # Handle list format [behavior_name, param1, ...]
            if not value:
                raise ValueError("Empty binding list value")
            behavior_name = value[0]
            params = value[1:]
    
            if behavior_name == "kp":
                if len(params) != 1:
                    raise ValueError(
                        f"kp behavior expects 1 parameter, "
                        f"got {len(params)}: {params}"
                    )
                # Ensure params is always a list
                return Binding(behavior=None, params=[params[0]])  # Wrap param
    
            # Look up custom behavior - should exist now
            behavior = self.behaviors.get(behavior_name)
            if behavior:
                # TODO: Validate params against behavior definition if needed
                return Binding(behavior=behavior, params=params)
            else:
                # This shouldn't happen if pass logic is correct
>               raise ValueError(
                    f"Unknown behavior referenced during binding creation: "
                    f"{behavior_name}"
                )
E               ValueError: Unknown behavior referenced during binding creation: invalid_binding

converter/dts/extractor.py:395: ValueError

During handling of the above exception, another exception occurred:

    def test_error_handling():
        """Test error handling with malformed input."""
        # Test missing root node
        with pytest.raises(DtsParseError, match="DTS must start with root node"):
            parser = DtsParser()
            parser.parse("keymap { };")
    
        # Test invalid property assignment
        with pytest.raises(DtsParseError, match="Invalid property value"):
            parser = DtsParser()
            parser.parse(
                """
            / {
                keymap {
                    prop = value
                };
            };
            """
            )
    
        # Test invalid binding format
        parser = DtsParser()
        ast = parser.parse(
            """
        / {
            keymap {
                default_layer {
                    bindings = <&invalid_binding>;
                };
            };
        };
        """
        )
        extractor = KeymapExtractor()
>       with pytest.raises(ValueError, match="Invalid binding format"):
E       AssertionError: Regex pattern did not match.
E        Regex: 'Invalid binding format'
E        Input: 'Unknown behavior referenced during binding creation: invalid_binding'

tests/dts/test_end_to_end.py:260: AssertionError
----------------------------- Captured stdout call -----------------------------
[DEBUG] i=82, char='&', depth=1, snippet=<&
[DEBUG] i=83, char='i', depth=1, snippet=<&i
[DEBUG] i=84, char='n', depth=1, snippet=<&in
[DEBUG] i=85, char='v', depth=1, snippet=<&inv
[DEBUG] i=86, char='a', depth=1, snippet=<&inva
[DEBUG] i=87, char='l', depth=1, snippet=<&inval
[DEBUG] i=88, char='i', depth=1, snippet=<&invali
[DEBUG] i=89, char='d', depth=1, snippet=<&invalid
[DEBUG] i=90, char='_', depth=1, snippet=<&invalid_
[DEBUG] i=91, char='b', depth=1, snippet=<&invalid_b
[DEBUG] i=92, char='i', depth=1, snippet=<&invalid_bi
[DEBUG] i=93, char='n', depth=1, snippet=<&invalid_bin
[DEBUG] i=94, char='d', depth=1, snippet=<&invalid_bind
[DEBUG] i=95, char='i', depth=1, snippet=<&invalid_bindi
[DEBUG] i=96, char='n', depth=1, snippet=<&invalid_bindin
[DEBUG] i=97, char='g', depth=1, snippet=<&invalid_binding
[DEBUG] i=98, char='>', depth=1, snippet=<&invalid_binding>
=========================== short test summary info ============================
FAILED tests/dts/test_end_to_end.py::test_error_handling - AssertionError: Re...
========================= 1 failed, 5 passed in 0.04s ==========================
