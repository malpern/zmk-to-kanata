FF..FFFF..FFFFFFFFFFFFFFFFFFFFFFF.FFFFFFFFFFFFFFFFFFFFF.....F.FFFFFFFFFF [ 19%]
FFFFFFFFFFFFFFF.FFFF..F.F...F.FFFFFFFFFF............FF.F.FF............. [ 39%]
....F..F.FFFFFFFFF..FFFF...............FEEEEEE.FFFFFFFFF..FF.FFFEEEEEsEE [ 59%]
EEE.....EEEEEEEEEEEEEEEEEEEEEE..........FFFFFFFF................FFF.FF.F [ 79%]
FFF...E..FE..FFFFFFFFFFFFFFFFFFFF.F..FFFFFFFF..FFF..FFFFFFFFFFFFFFF..... [ 98%]
....                                                                     [100%]
==================================== ERRORS ====================================
______ ERROR at setup of TestBenVallackConfig.test_parse_custom_behaviors ______
converter/tests/unit/parser/test_ben_vallack_config.py:13: in ben_vallack_config
    with open(config_path, "r") as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/ben_vallack_config.dtsi'
__ ERROR at setup of TestBenVallackConfig.test_parse_complex_binding_patterns __
converter/tests/unit/parser/test_ben_vallack_config.py:13: in ben_vallack_config
    with open(config_path, "r") as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/ben_vallack_config.dtsi'
_ ERROR at setup of TestBenVallackConfig.test_parse_nested_modifier_combinations _
converter/tests/unit/parser/test_ben_vallack_config.py:13: in ben_vallack_config
    with open(config_path, "r") as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/ben_vallack_config.dtsi'
_____ ERROR at setup of TestBenVallackConfig.test_parse_layer_transitions ______
converter/tests/unit/parser/test_ben_vallack_config.py:13: in ben_vallack_config
    with open(config_path, "r") as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/ben_vallack_config.dtsi'
_ ERROR at setup of TestBenVallackConfig.test_parse_non_standard_key_references _
converter/tests/unit/parser/test_ben_vallack_config.py:13: in ben_vallack_config
    with open(config_path, "r") as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/ben_vallack_config.dtsi'
________ ERROR at setup of TestBenVallackConfig.test_parse_full_config _________
converter/tests/unit/parser/test_ben_vallack_config.py:13: in ben_vallack_config
    with open(config_path, "r") as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/ben_vallack_config.dtsi'
____________________ ERROR at setup of test_extract_layers _____________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_layer_parser.py, line 5
  def test_extract_layers(basic_layer_parser):
E       fixture 'basic_layer_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_layer_parser.py:5
____________________ ERROR at setup of test_parse_zmk_file _____________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_layer_parser.py, line 21
  def test_parse_zmk_file(basic_layer_parser):
E       fixture 'basic_layer_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_layer_parser.py:21
______________________ ERROR at setup of test_empty_layer ______________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_layer_parser.py, line 48
  def test_empty_layer(basic_layer_parser):
E       fixture 'basic_layer_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_layer_parser.py:48
_________________ ERROR at setup of test_invalid_layer_syntax __________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_layer_parser.py, line 61
  def test_invalid_layer_syntax(basic_layer_parser):
E       fixture 'basic_layer_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_layer_parser.py:61
______________________ ERROR at setup of test_basic_macro ______________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py, line 10
  def test_basic_macro(macro_parser: MacroParser):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py:10
__________________ ERROR at setup of test_parameterized_macro __________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py, line 85
  def test_parameterized_macro(macro_parser: MacroParser):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py:85
_ ERROR at setup of test_invalid_macro_settings[wait-ms = 30;-Invalid setting format-True] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py, line 112
  @pytest.mark.parametrize("invalid_setting,error_msg,match_exact", [
      # Expect "Invalid setting format" for missing <>
      ("wait-ms = 30;", "Invalid setting format", True),
      # Expect "Setting value must be positive" for negative value (allow substring match)
      ("tap-ms = <-10>;", "Setting value must be positive", False),
      # Expect "Invalid bindings line" (exact match)
      ("bindings = kp A;", "Invalid bindings line", True),
  ])
  def test_invalid_macro_settings(macro_parser: MacroParser, invalid_setting: str, error_msg: str, match_exact: bool):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py:112
_ ERROR at setup of test_invalid_macro_settings[tap-ms = <-10>;-Setting value must be positive-False] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py, line 112
  @pytest.mark.parametrize("invalid_setting,error_msg,match_exact", [
      # Expect "Invalid setting format" for missing <>
      ("wait-ms = 30;", "Invalid setting format", True),
      # Expect "Setting value must be positive" for negative value (allow substring match)
      ("tap-ms = <-10>;", "Setting value must be positive", False),
      # Expect "Invalid bindings line" (exact match)
      ("bindings = kp A;", "Invalid bindings line", True),
  ])
  def test_invalid_macro_settings(macro_parser: MacroParser, invalid_setting: str, error_msg: str, match_exact: bool):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py:112
_ ERROR at setup of test_invalid_macro_settings[bindings = kp A;-Invalid bindings line-True] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py, line 112
  @pytest.mark.parametrize("invalid_setting,error_msg,match_exact", [
      # Expect "Invalid setting format" for missing <>
      ("wait-ms = 30;", "Invalid setting format", True),
      # Expect "Setting value must be positive" for negative value (allow substring match)
      ("tap-ms = <-10>;", "Setting value must be positive", False),
      # Expect "Invalid bindings line" (exact match)
      ("bindings = kp A;", "Invalid bindings line", True),
  ])
  def test_invalid_macro_settings(macro_parser: MacroParser, invalid_setting: str, error_msg: str, match_exact: bool):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py:112
_____________________ ERROR at setup of test_nested_macros _____________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py, line 137
  def test_nested_macros(macro_parser: MacroParser):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser.py:137
________________ ERROR at setup of test_complex_binding_formats ________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py, line 6
  def test_complex_binding_formats(macro_parser):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py:6
____________________ ERROR at setup of test_error_recovery _____________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py, line 51
  def test_error_recovery(macro_parser):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py:51
___________________ ERROR at setup of test_state_transitions ___________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py, line 82
  def test_state_transitions(macro_parser):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py:82
_ ERROR at setup of test_invalid_state_transitions[test: test {-No macros block] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py, line 132
  @pytest.mark.parametrize("invalid_state,error_msg", [
      ("test: test {", "No macros block"),
      ("inner: inner {", "Already parsing a macro"),
      ("bindings = <&macro_tap &kp A>;", "No macro being parsed"),
      ("wait-ms = <30>;", "No macro being parsed"),
  ])
  def test_invalid_state_transitions(macro_parser, invalid_state, error_msg):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py:132
_ ERROR at setup of test_invalid_state_transitions[inner: inner {-Already parsing a macro] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py, line 132
  @pytest.mark.parametrize("invalid_state,error_msg", [
      ("test: test {", "No macros block"),
      ("inner: inner {", "Already parsing a macro"),
      ("bindings = <&macro_tap &kp A>;", "No macro being parsed"),
      ("wait-ms = <30>;", "No macro being parsed"),
  ])
  def test_invalid_state_transitions(macro_parser, invalid_state, error_msg):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py:132
_ ERROR at setup of test_invalid_state_transitions[bindings = <&macro_tap &kp A>;-No macro being parsed] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py, line 132
  @pytest.mark.parametrize("invalid_state,error_msg", [
      ("test: test {", "No macros block"),
      ("inner: inner {", "Already parsing a macro"),
      ("bindings = <&macro_tap &kp A>;", "No macro being parsed"),
      ("wait-ms = <30>;", "No macro being parsed"),
  ])
  def test_invalid_state_transitions(macro_parser, invalid_state, error_msg):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py:132
_ ERROR at setup of test_invalid_state_transitions[wait-ms = <30>;-No macro being parsed] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py, line 132
  @pytest.mark.parametrize("invalid_state,error_msg", [
      ("test: test {", "No macros block"),
      ("inner: inner {", "Already parsing a macro"),
      ("bindings = <&macro_tap &kp A>;", "No macro being parsed"),
      ("wait-ms = <30>;", "No macro being parsed"),
  ])
  def test_invalid_state_transitions(macro_parser, invalid_state, error_msg):
E       fixture 'macro_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_macro_parser_edge_cases.py:132
_______________ ERROR at setup of test_basic_holdtap_properties ________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser.py, line 5
  def test_basic_holdtap_properties(taphold_parser):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser.py:5
__________________ ERROR at setup of test_full_configuration ___________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser.py, line 33
  def test_full_configuration(taphold_parser):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser.py:33
___________________ ERROR at setup of test_advanced_features ___________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser.py, line 57
  def test_advanced_features(taphold_parser):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser.py:57
_________________ ERROR at setup of test_partial_configuration _________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser.py, line 80
  def test_partial_configuration(taphold_parser):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser.py:80
__________________ ERROR at setup of test_real_world_example ___________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser.py, line 103
  def test_real_world_example(taphold_parser):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser.py:103
_______________ ERROR at setup of test_key_positions_with_commas _______________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py, line 6
  def test_key_positions_with_commas(taphold_parser):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py:6
_________________ ERROR at setup of test_invalid_key_positions _________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py, line 22
  def test_invalid_key_positions(taphold_parser):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py:22
____________________ ERROR at setup of test_invalid_flavor _____________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py, line 38
  def test_invalid_flavor(taphold_parser):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py:38
___________________ ERROR at setup of test_invalid_behavior ____________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py, line 54
  def test_invalid_behavior(taphold_parser):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py:54
________________ ERROR at setup of test_missing_required_fields ________________
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py, line 67
  def test_missing_required_fields(taphold_parser):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py:67
_ ERROR at setup of test_invalid_field_values[tapping-term-ms-<-100>-must be positive] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py, line 82
  @pytest.mark.parametrize("field,value,error_msg", [
      ("tapping-term-ms", "<-100>", "must be positive"),
      ("quick-tap-ms", "<0>", "must be positive"),
      ("require-prior-idle-ms", "<-50>", "must be positive"),
      ("flavor", '"invalid"', "Invalid flavor"),
      ("bindings", "<&invalid>", "Invalid binding format"),
  ])
  def test_invalid_field_values(taphold_parser, field, value, error_msg):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py:82
_ ERROR at setup of test_invalid_field_values[quick-tap-ms-<0>-must be positive] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py, line 82
  @pytest.mark.parametrize("field,value,error_msg", [
      ("tapping-term-ms", "<-100>", "must be positive"),
      ("quick-tap-ms", "<0>", "must be positive"),
      ("require-prior-idle-ms", "<-50>", "must be positive"),
      ("flavor", '"invalid"', "Invalid flavor"),
      ("bindings", "<&invalid>", "Invalid binding format"),
  ])
  def test_invalid_field_values(taphold_parser, field, value, error_msg):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py:82
_ ERROR at setup of test_invalid_field_values[require-prior-idle-ms-<-50>-must be positive] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py, line 82
  @pytest.mark.parametrize("field,value,error_msg", [
      ("tapping-term-ms", "<-100>", "must be positive"),
      ("quick-tap-ms", "<0>", "must be positive"),
      ("require-prior-idle-ms", "<-50>", "must be positive"),
      ("flavor", '"invalid"', "Invalid flavor"),
      ("bindings", "<&invalid>", "Invalid binding format"),
  ])
  def test_invalid_field_values(taphold_parser, field, value, error_msg):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py:82
_ ERROR at setup of test_invalid_field_values[flavor-"invalid"-Invalid flavor] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py, line 82
  @pytest.mark.parametrize("field,value,error_msg", [
      ("tapping-term-ms", "<-100>", "must be positive"),
      ("quick-tap-ms", "<0>", "must be positive"),
      ("require-prior-idle-ms", "<-50>", "must be positive"),
      ("flavor", '"invalid"', "Invalid flavor"),
      ("bindings", "<&invalid>", "Invalid binding format"),
  ])
  def test_invalid_field_values(taphold_parser, field, value, error_msg):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py:82
_ ERROR at setup of test_invalid_field_values[bindings-<&invalid>-Invalid binding format] _
file /Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py, line 82
  @pytest.mark.parametrize("field,value,error_msg", [
      ("tapping-term-ms", "<-100>", "must be positive"),
      ("quick-tap-ms", "<0>", "must be positive"),
      ("require-prior-idle-ms", "<-50>", "must be positive"),
      ("flavor", '"invalid"', "Invalid flavor"),
      ("bindings", "<&invalid>", "Invalid binding format"),
  ])
  def test_invalid_field_values(taphold_parser, field, value, error_msg):
E       fixture 'taphold_parser' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, temp_test_dir, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Volumes/Flash Gordon Storage/Dropbox/code/nicktokatana/converter/tests/unit/parser/test_taphold_parser_edge_cases.py:82
_________ ERROR at setup of test_validate_intermediate_representation __________
converter/tests/unit/test_pipeline_validator.py:65: in sample_ir
    KeyMapping(key="A", position=0),
E   TypeError: KeyMapping.__init__() got an unexpected keyword argument 'position'
___________________ ERROR at setup of test_validate_pipeline ___________________
converter/tests/unit/test_pipeline_validator.py:65: in sample_ir
    KeyMapping(key="A", position=0),
E   TypeError: KeyMapping.__init__() got an unexpected keyword argument 'position'
=================================== FAILURES ===================================
________________________ test_multi_layer_with_hold_tap ________________________
converter/tests/e2e_tests/test_advanced_features.py:57: in test_multi_layer_with_hold_tap
    assert exit_code == 0
E   assert None == 0
____________________ test_multi_layer_with_custom_behaviors ____________________
converter/tests/e2e_tests/test_advanced_features.py:153: in test_multi_layer_with_custom_behaviors
    assert exit_code == 0
E   assert None == 0
__________________________ test_basic_file_conversion __________________________
converter/tests/e2e_tests/test_cli.py:59: in test_basic_file_conversion
    assert exit_code == 0
E   assert None == 0
___________________________ test_missing_input_file ____________________________
converter/main.py:97: in main
    with open(args.input_file, 'r') as f:
E   FileNotFoundError: [Errno 2] No such file or directory: '/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmpku10lsbq/nonexistent.dtsi'

During handling of the above exception, another exception occurred:
converter/tests/e2e_tests/test_cli.py:74: in test_missing_input_file
    exit_code = main([str(input_file), str(output_file)])
converter/cli.py:56: in main
    return convert_main(main_args)
converter/main.py:127: in main
    sys.exit(1)
E   SystemExit: 1
----------------------------- Captured stderr call -----------------------------
ERROR: [Errno 2] No such file or directory: '/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/tmpku10lsbq/nonexistent.dtsi'
__________________________ test_invalid_input_format ___________________________
converter/parser/zmk_parser.py:137: in parse
    raise ValueError("No layers found in ZMK file")
E   ValueError: No layers found in ZMK file

The above exception was the direct cause of the following exception:
converter/zmk_to_kanata.py:65: in convert_zmk_to_kanata
    keymap_config = parser.parse(Path(tmp_path))
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: No layers found in ZMK file

During handling of the above exception, another exception occurred:
converter/main.py:101: in main
    kanata_config, metadata = convert_zmk_to_kanata(
converter/zmk_to_kanata.py:101: in convert_zmk_to_kanata
    error_mgr.add_error(
converter/error_handling/error_manager.py:128: in add_error
    raise Exception(str(error))
E   Exception: ERROR: [converter] - Error during conversion: Failed to parse ZMK file: No layers found in ZMK file

During handling of the above exception, another exception occurred:
converter/tests/e2e_tests/test_cli.py:90: in test_invalid_input_format
    exit_code = main([str(input_file), str(output_file)])
converter/cli.py:56: in main
    return convert_main(main_args)
converter/main.py:127: in main
    sys.exit(1)
E   SystemExit: 1
----------------------------- Captured stderr call -----------------------------
ERROR: ERROR: [converter] - Error during conversion: Failed to parse ZMK file: No layers found in ZMK file
------------------------------ Captured log call -------------------------------
ERROR    converter.error_handling.error_manager:error_manager.py:145 ERROR: [converter] - Error during conversion: Failed to parse ZMK file: No layers found in ZMK file
___________________________ test_invalid_output_path ___________________________
converter/tests/e2e_tests/test_cli.py:125: in test_invalid_output_path
    assert exit_code == 1
E   assert None == 1
___________________________ test_output_file_format ____________________________
converter/tests/e2e_tests/test_file_operations.py:101: in test_output_file_format
    assert 'a b' in lines[default_layer_start + 1].strip()
E   AssertionError: assert 'a b' in ''
E    +  where '' = <built-in method strip of str object at 0x101e5a760>()
E    +    where <built-in method strip of str object at 0x101e5a760> = '  '.strip
_________________________ test_homerow_mods_conversion _________________________
converter/tests/e2e_tests/test_homerow_mods.py:37: in test_homerow_mods_conversion
    assert "(tap-hold 200 200 a lmet)" in kanata_config
E   AssertionError: assert '(tap-hold 200 200 a lmet)' in ';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default\n  \n)'
_______________________ test_homerow_mods_mac_conversion _______________________
converter/tests/e2e_tests/test_homerow_mods.py:74: in test_homerow_mods_mac_conversion
    assert "(tap-hold 200 200 a lmet)" in kanata_config
E   AssertionError: assert '(tap-hold 200 200 a lmet)' in ';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default\n  \n)'
___________________________ test_single_layer_keymap ___________________________
converter/tests/e2e_tests/test_input_formats.py:30: in test_single_layer_keymap
    assert exit_code == 0
E   assert None == 0
__________________________ test_multiple_layer_keymap __________________________
converter/tests/e2e_tests/test_input_formats.py:89: in test_multiple_layer_keymap
    assert exit_code == 0
E   assert None == 0
___________________________ test_empty_layer_keymap ____________________________
converter/tests/e2e_tests/test_input_formats.py:131: in test_empty_layer_keymap
    assert exit_code == 0
E   assert None == 0
_________________________ test_comments_and_whitespace _________________________
converter/tests/e2e_tests/test_input_formats.py:175: in test_comments_and_whitespace
    assert exit_code == 0
E   assert None == 0
_________________________ test_basic_macro_conversion __________________________
converter/tests/e2e_tests/test_macro.py:42: in test_basic_macro_conversion
    assert exit_code == 0
E   assert None == 0
________________________ test_complex_macro_conversion _________________________
converter/tests/e2e_tests/test_macro.py:102: in test_complex_macro_conversion
    assert exit_code == 0
E   assert None == 0
_____________________ test_parameterized_macro_conversion ______________________
converter/tests/e2e_tests/test_macro.py:157: in test_parameterized_macro_conversion
    assert exit_code == 0
E   assert None == 0
_________________________ test_output_file_permissions _________________________
converter/tests/e2e_tests/test_output_validation.py:37: in test_output_file_permissions
    assert exit_code == 0
E   assert None == 0
__________________________ test_output_file_encoding ___________________________
converter/tests/e2e_tests/test_output_validation.py:81: in test_output_file_encoding
    assert exit_code == 0
E   assert None == 0
___________________________ test_output_file_format ____________________________
converter/tests/e2e_tests/test_output_validation.py:118: in test_output_file_format
    assert exit_code == 0
E   assert None == 0
_____________________ test_kanata_s_expression_conformity ______________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: macro test_macro

During handling of the above exception, another exception occurred:
converter/parser/layer_parser.py:164: in parse_bindings_line
    result = [self.parse_binding(b) for b in bindings]
converter/parser/layer_parser.py:122: in parse_binding
    return KeyMapping(key=binding)
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: macro test_macro

The above exception was the direct cause of the following exception:
converter/parser/zmk_parser.py:250: in _parse_binding_line
    self.layer_parser.add_bindings_line(line)
converter/parser/layer_parser.py:188: in add_bindings_line
    bindings = self.parse_bindings_line(line)
converter/parser/layer_parser.py:168: in parse_bindings_line
    raise ValueError(
E   ValueError: Invalid binding in line: &kp A &macro test_macro

During handling of the above exception, another exception occurred:
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: unknown

During handling of the above exception, another exception occurred:
converter/parser/zmk_parser.py:173: in _parse_line
    self._parse_bindings_start(line)
converter/parser/zmk_parser.py:234: in _parse_bindings_start
    self._parse_binding_line(bindings)
converter/parser/zmk_parser.py:257: in _parse_binding_line
    self.error_manager.handle_invalid_binding(
converter/error_recovery.py:161: in handle_invalid_binding
    return KeyMapping(key="unknown")
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: unknown

During handling of the above exception, another exception occurred:
converter/zmk_to_kanata.py:65: in convert_zmk_to_kanata
    keymap_config = parser.parse(Path(tmp_path))
converter/parser/zmk_parser.py:144: in parse
    raise e
converter/parser/zmk_parser.py:134: in parse
    self._parse_line(line)
converter/parser/zmk_parser.py:185: in _parse_line
    raise ParserError(f"Line {self.current_line}: {str(e)}")
E   converter.parser.parser_error.ParserError: Line 16: Invalid key mapping: Invalid key: unknown

During handling of the above exception, another exception occurred:
converter/main.py:101: in main
    kanata_config, metadata = convert_zmk_to_kanata(
converter/zmk_to_kanata.py:101: in convert_zmk_to_kanata
    error_mgr.add_error(
converter/error_handling/error_manager.py:128: in add_error
    raise Exception(str(error))
E   Exception: ERROR: [converter] - Error during conversion: Line 16: Invalid key mapping: Invalid key: unknown

During handling of the above exception, another exception occurred:
converter/tests/e2e_tests/test_output_validation.py:180: in test_kanata_s_expression_conformity
    exit_code = main([str(zmk_file), str(kanata_file)])
converter/cli.py:56: in main
    return convert_main(main_args)
converter/main.py:127: in main
    sys.exit(1)
E   SystemExit: 1
----------------------------- Captured stderr call -----------------------------
ERROR: ERROR: [converter] - Error during conversion: Line 16: Invalid key mapping: Invalid key: unknown
------------------------------ Captured log call -------------------------------
WARNING  converter.error_recovery:error_recovery.py:159 Line 16: Invalid binding '&kp A &macro test_macro' converted to unknown
ERROR    converter.parser.zmk_parser:zmk_parser.py:182 Error parsing line 16: bindings = <&kp A &macro test_macro>;
ERROR    converter.error_handling.error_manager:error_manager.py:145 ERROR: [converter] - Error during conversion: Line 16: Invalid key mapping: Invalid key: unknown
_________________________ test_qwerty_standard_layout __________________________
converter/tests/e2e_tests/test_real_world_configs.py:79: in test_qwerty_standard_layout
    assert "esc" in kanata_content.lower()
E   AssertionError: assert 'esc' in ';; zmk to kanata configuration\n;; generated automatically - do not edit\n\n;; global settings\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default\n  \n)\n\n(deflayer function\n  \n)'
E    +  where ';; zmk to kanata configuration\n;; generated automatically - do not edit\n\n;; global settings\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default\n  \n)\n\n(deflayer function\n  \n)' = <built-in method lower of str object at 0x101d7a1f0>()
E    +    where <built-in method lower of str object at 0x101d7a1f0> = ';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default\n  \n)\n\n(deflayer function\n  \n)'.lower
_____________________________ test_colemak_layout ______________________________
converter/tests/e2e_tests/test_real_world_configs.py:157: in test_colemak_layout
    assert "q w f p g" in default_layer.lower()
E   AssertionError: assert 'q w f p g' in '\n  \n)\n\n'
E    +  where '\n  \n)\n\n' = <built-in method lower of str object at 0x1015e1d70>()
E    +    where <built-in method lower of str object at 0x1015e1d70> = '\n  \n)\n\n'.lower
__________________________ test_split_keyboard_layout __________________________
converter/tests/e2e_tests/test_real_world_configs.py:237: in test_split_keyboard_layout
    assert "lgui" in kanata_content.lower()
E   AssertionError: assert 'lgui' in ';; zmk to kanata configuration\n;; generated automatically - do not edit\n\n;; global settings\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default\n  \n)\n\n(deflayer lower\n  \n)\n\n(deflayer raise\n  \n)'
E    +  where ';; zmk to kanata configuration\n;; generated automatically - do not edit\n\n;; global settings\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default\n  \n)\n\n(deflayer lower\n  \n)\n\n(deflayer raise\n  \n)' = <built-in method lower of str object at 0x101d7fa30>()
E    +    where <built-in method lower of str object at 0x101d7fa30> = ';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default\n  \n)\n\n(deflayer lower\n  \n)\n\n(deflayer raise\n  \n)'.lower
___________________ test_ergonomic_layout_with_homerow_mods ____________________
converter/tests/e2e_tests/test_real_world_configs.py:344: in test_ergonomic_layout_with_homerow_mods
    assert exit_code == 0
E   assert None == 0
----------------------------- Captured stdout call -----------------------------
Error output:
________________________ test_ben_vallack_cradio_layout ________________________
converter/tests/e2e_tests/test_real_world_configs.py:469: in test_ben_vallack_cradio_layout
    assert exit_code == 0
E   assert None == 0
----------------------------- Captured stdout call -----------------------------
Error output:
______________________________ test_dvorak_layout ______________________________
converter/tests/e2e_tests/test_real_world_configs.py:589: in test_dvorak_layout
    assert "apos" in default_layer.lower() or "'" in default_layer
E   assert ('apos' in '\n  \n)\n\n' or "'" in '\n  \n)\n\n')
E    +  where '\n  \n)\n\n' = <built-in method lower of str object at 0x101e59650>()
E    +    where <built-in method lower of str object at 0x101e59650> = '\n  \n)\n\n'.lower
_________________________ test_ergonomic_kyria_layout __________________________
converter/tests/e2e_tests/test_real_world_configs.py:688: in test_ergonomic_kyria_layout
    assert "space" in default_layer.lower()
E   AssertionError: assert 'space' in '\n  \n)\n\n'
E    +  where '\n  \n)\n\n' = <built-in method lower of str object at 0x101edb1e0>()
E    +    where <built-in method lower of str object at 0x101edb1e0> = '\n  \n)\n\n'.lower
____________________________ test_sticky_key_basic _____________________________
converter/tests/e2e_tests/test_sticky_keys.py:39: in test_sticky_key_basic
    assert exit_code == 0
E   assert None == 0
___________________________ test_sticky_key_advanced ___________________________
converter/tests/e2e_tests/test_sticky_keys.py:62: in test_sticky_key_advanced
    assert exit_code == 0
E   assert None == 0
________________________ test_basic_conversion_pipeline ________________________
converter/tests/integration/end_to_end/test_end_to_end.py:44: in test_basic_conversion_pipeline
    assert exit_code == 0
E   assert None == 0
_______________________ test_complex_binding_conversion ________________________
converter/tests/integration/end_to_end/test_end_to_end.py:94: in test_complex_binding_conversion
    assert result is True
E   AssertionError: assert (';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200...'INFO': 1, ...}, 'total_errors': 1}, 'global_settings': GlobalSettings(tap_time=200, hold_time=250), 'layer_count': 1}) is True
____________________________ test_macro_conversion _____________________________
converter/tests/integration/end_to_end/test_end_to_end.py:155: in test_macro_conversion
    assert result is True
E   AssertionError: assert (';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200...'INFO': 1, ...}, 'total_errors': 1}, 'global_settings': GlobalSettings(tap_time=200, hold_time=250), 'layer_count': 1}) is True
_____________________________ test_error_recovery ______________________________
converter/tests/integration/end_to_end/test_end_to_end.py:196: in test_error_recovery
    result = convert_zmk_to_kanata(
E   TypeError: convert_zmk_to_kanata() got an unexpected keyword argument 'recover_errors'
________________________ test_multiple_layer_conversion ________________________
converter/tests/integration/end_to_end/test_end_to_end.py:259: in test_multiple_layer_conversion
    assert result is True
E   AssertionError: assert (';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200...'INFO': 1, ...}, 'total_errors': 1}, 'global_settings': GlobalSettings(tap_time=200, hold_time=250), 'layer_count': 3}) is True
_____________________________ test_global_settings _____________________________
converter/tests/integration/end_to_end/test_end_to_end.py:308: in test_global_settings
    assert result is True
E   AssertionError: assert (';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200...'INFO': 1, ...}, 'total_errors': 1}, 'global_settings': GlobalSettings(tap_time=200, hold_time=250), 'layer_count': 1}) is True
_________________________ test_corne_keymap_conversion _________________________
converter/tests/integration/end_to_end/test_real_world_examples.py:91: in test_corne_keymap_conversion
    assert result is True
E   AssertionError: assert (';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200...'INFO': 1, ...}, 'total_errors': 1}, 'global_settings': GlobalSettings(tap_time=200, hold_time=250), 'layer_count': 3}) is True
___________________________ test_ferris_sweep_keymap ___________________________
converter/tests/integration/end_to_end/test_real_world_examples.py:225: in test_ferris_sweep_keymap
    assert result is True
E   AssertionError: assert (';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200...'INFO': 1, ...}, 'total_errors': 1}, 'global_settings': GlobalSettings(tap_time=200, hold_time=250), 'layer_count': 4}) is True
________________________ test_basic_binding_integration ________________________
converter/parser/zmk_parser.py:124: in parse
    content = file_path.read_text()
E   AttributeError: 'str' object has no attribute 'read_text'

The above exception was the direct cause of the following exception:
converter/tests/integration/test_binding_parser_integration.py:27: in test_basic_binding_integration
    result = parser.parse(content)
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
_______________________ test_complex_binding_integration _______________________
converter/parser/zmk_parser.py:124: in parse
    content = file_path.read_text()
E   AttributeError: 'str' object has no attribute 'read_text'

The above exception was the direct cause of the following exception:
converter/tests/integration/test_binding_parser_integration.py:55: in test_complex_binding_integration
    result = parser.parse(content)
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
_______________________ test_nested_binding_integration ________________________
converter/parser/zmk_parser.py:124: in parse
    content = file_path.read_text()
E   AttributeError: 'str' object has no attribute 'read_text'

The above exception was the direct cause of the following exception:
converter/tests/integration/test_binding_parser_integration.py:84: in test_nested_binding_integration
    result = parser.parse(content)
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
_______________________ test_error_recovery_integration ________________________
converter/tests/integration/test_binding_parser_integration.py:116: in test_error_recovery_integration
    assert len(result["layers"]) == 1
E   assert 0 == 1
E    +  where 0 = len([])
------------------------------ Captured log call -------------------------------
ERROR    converter.parser.error_recovery_wrapper:error_recovery_wrapper.py:36 Parser error: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
______________________ test_multiline_binding_integration ______________________
converter/parser/zmk_parser.py:124: in parse
    content = file_path.read_text()
E   AttributeError: 'str' object has no attribute 'read_text'

The above exception was the direct cause of the following exception:
converter/tests/integration/test_binding_parser_integration.py:160: in test_multiline_binding_integration
    result = parser.parse(content)
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
_______________________ test_inline_binding_integration ________________________
converter/parser/zmk_parser.py:124: in parse
    content = file_path.read_text()
E   AttributeError: 'str' object has no attribute 'read_text'

The above exception was the direct cause of the following exception:
converter/tests/integration/test_binding_parser_integration.py:188: in test_inline_binding_integration
    result = parser.parse(content)
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
_______________________ test_multiple_layers_integration _______________________
converter/parser/zmk_parser.py:124: in parse
    content = file_path.read_text()
E   AttributeError: 'str' object has no attribute 'read_text'

The above exception was the direct cause of the following exception:
converter/tests/integration/test_binding_parser_integration.py:229: in test_multiple_layers_integration
    result = parser.parse(content)
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
________________________ test_invalid_binding_recovery _________________________
converter/tests/integration/test_error_recovery_integration.py:29: in test_invalid_binding_recovery
    assert len(result["layers"]) == 1
E   assert 0 == 1
E    +  where 0 = len([])
------------------------------ Captured log call -------------------------------
ERROR    converter.parser.error_recovery_wrapper:error_recovery_wrapper.py:36 Parser error: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
_________________________ test_invalid_layer_recovery __________________________
converter/tests/integration/test_error_recovery_integration.py:72: in test_invalid_layer_recovery
    assert len(result["layers"]) == 3
E   assert 0 == 3
E    +  where 0 = len([])
------------------------------ Captured log call -------------------------------
ERROR    converter.parser.error_recovery_wrapper:error_recovery_wrapper.py:36 Parser error: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
_________________________ test_multiple_error_recovery _________________________
converter/tests/integration/test_error_recovery_integration.py:114: in test_multiple_error_recovery
    assert len(result["layers"]) == 3
E   assert 0 == 3
E    +  where 0 = len([])
------------------------------ Captured log call -------------------------------
ERROR    converter.parser.error_recovery_wrapper:error_recovery_wrapper.py:36 Parser error: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
________________________ test_nested_behavior_recovery _________________________
converter/tests/integration/test_error_recovery_integration.py:148: in test_nested_behavior_recovery
    assert len(result["layers"]) == 1
E   assert 0 == 1
E    +  where 0 = len([])
------------------------------ Captured log call -------------------------------
ERROR    converter.parser.error_recovery_wrapper:error_recovery_wrapper.py:36 Parser error: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
______________________ test_error_recovery_with_comments _______________________
converter/tests/integration/test_error_recovery_integration.py:185: in test_error_recovery_with_comments
    assert len(result["layers"]) == 1
E   assert 0 == 1
E    +  where 0 = len([])
------------------------------ Captured log call -------------------------------
ERROR    converter.parser.error_recovery_wrapper:error_recovery_wrapper.py:36 Parser error: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
_________________ test_error_recovery_preserves_valid_content __________________
converter/tests/integration/test_error_recovery_integration.py:227: in test_error_recovery_preserves_valid_content
    assert len(result["layers"]) == 3
E   assert 0 == 3
E    +  where 0 = len([])
------------------------------ Captured log call -------------------------------
ERROR    converter.parser.error_recovery_wrapper:error_recovery_wrapper.py:36 Parser error: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
______________________ test_key_validation_with_hold_tap _______________________
converter/tests/integration/test_key_validation.py:91: in test_key_validation_with_hold_tap
    with pytest.raises(ValueError) as exc:
E   Failed: DID NOT RAISE <class 'ValueError'>
_________________________ test_basic_layer_conversion __________________________
converter/tests/integration/test_zmk_to_kanata_conversion.py:63: in test_basic_layer_conversion
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
___________________________ test_holdtap_conversion ____________________________
converter/tests/integration/test_zmk_to_kanata_conversion.py:97: in test_holdtap_conversion
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
____________________________ test_macro_conversion _____________________________
converter/tests/integration/test_zmk_to_kanata_conversion.py:131: in test_macro_conversion
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
__________________________ test_sticky_key_conversion __________________________
converter/tests/integration/test_zmk_to_kanata_conversion.py:159: in test_sticky_key_conversion
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
________________________ test_complex_layer_conversion _________________________
converter/tests/integration/test_zmk_to_kanata_conversion.py:198: in test_complex_layer_conversion
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
________________________ test_mixed_behavior_conversion ________________________
converter/tests/integration/test_zmk_to_kanata_conversion.py:244: in test_mixed_behavior_conversion
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
_________________________ test_empty_layer_conversion __________________________
converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py:56: in test_empty_layer_conversion
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
________________________ test_invalid_macro_conversion _________________________
converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py:90: in test_invalid_macro_conversion
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
_______________________ test_nested_behavior_conversion ________________________
converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py:146: in test_nested_behavior_conversion
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
________________________ test_invalid_layer_references _________________________
converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py:196: in test_invalid_layer_references
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
______________________ test_special_character_conversion _______________________
converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py:229: in test_special_character_conversion
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
_________________________ test_mixed_timing_parameters _________________________
converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py:275: in test_mixed_timing_parameters
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
________________________ test_malformed_input_recovery _________________________
converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py:316: in test_malformed_input_recovery
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
__________________________ test_syntax_error_recovery __________________________
converter/tests/integration/test_zmk_to_kanata_error_handling.py:56: in test_syntax_error_recovery
    parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
_________________________ test_missing_required_fields _________________________
converter/tests/integration/test_zmk_to_kanata_error_handling.py:95: in test_missing_required_fields
    parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
____________________ test_invalid_macro_definition_recovery ____________________
converter/tests/integration/test_zmk_to_kanata_error_handling.py:139: in test_invalid_macro_definition_recovery
    parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
_________________________ test_layer_validation_errors _________________________
converter/tests/integration/test_zmk_to_kanata_error_handling.py:184: in test_layer_validation_errors
    parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
________________________ test_binding_validation_errors ________________________
converter/tests/integration/test_zmk_to_kanata_error_handling.py:223: in test_binding_validation_errors
    parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
________________________ test_error_context_information ________________________
converter/tests/integration/test_zmk_to_kanata_error_handling.py:261: in test_error_context_information
    parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
____________________________ test_partial_recovery _____________________________
converter/tests/integration/test_zmk_to_kanata_error_handling.py:297: in test_partial_recovery
    parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
________________________ test_error_recovery_strategies ________________________
converter/tests/integration/test_zmk_to_kanata_error_handling.py:325: in test_error_recovery_strategies
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
________________________ test_parser_performance_small _________________________
converter/parser/zmk_parser.py:124: in parse
    content = file_path.read_text()
E   AttributeError: 'str' object has no attribute 'read_text'

The above exception was the direct cause of the following exception:
converter/tests/performance/test_performance.py:95: in test_parser_performance_small
    result = parser.parse(content)
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
________________________ test_parser_performance_large _________________________
converter/parser/zmk_parser.py:124: in parse
    content = file_path.read_text()
E   AttributeError: 'str' object has no attribute 'read_text'

The above exception was the direct cause of the following exception:
converter/tests/performance/test_performance.py:114: in test_parser_performance_large
    result = parser.parse(content)
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
_________________________ test_transformer_performance _________________________
converter/parser/zmk_parser.py:124: in parse
    content = file_path.read_text()
E   AttributeError: 'str' object has no attribute 'read_text'

The above exception was the direct cause of the following exception:
converter/tests/performance/test_performance.py:135: in test_transformer_performance
    parse_result = parser.parse(content)
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: 'str' object has no attribute 'read_text'
_________________________ test_end_to_end_performance __________________________
converter/tests/performance/test_performance.py:174: in test_end_to_end_performance
    assert result is True
E   AssertionError: assert (';; ZMK to Kanata Configuration\n;; Generated automatically - DO NOT EDIT\n\n;; Global settings\n(defvar tap-time 200...'INFO': 1, ...}, 'total_errors': 1}, 'global_settings': GlobalSettings(tap_time=200, hold_time=250), 'layer_count': 1}) is True
----------------------------- Captured stdout call -----------------------------
End-to-end conversion time: 0.000504 seconds
_________________________ test_large_layer_performance _________________________
converter/tests/performance/test_zmk_to_kanata_performance.py:95: in test_large_layer_performance
    _, parse_time = measure_execution_time(
converter/tests/performance/test_zmk_to_kanata_performance.py:81: in measure_execution_time
    result = func()
converter/tests/performance/test_zmk_to_kanata_performance.py:96: in <lambda>
    lambda: parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
________________________ test_complex_macro_performance ________________________
converter/tests/performance/test_zmk_to_kanata_performance.py:131: in test_complex_macro_performance
    _, parse_time = measure_execution_time(
converter/tests/performance/test_zmk_to_kanata_performance.py:81: in measure_execution_time
    result = func()
converter/tests/performance/test_zmk_to_kanata_performance.py:132: in <lambda>
    lambda: parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
_______________________ test_mixed_behavior_performance ________________________
converter/tests/performance/test_zmk_to_kanata_performance.py:201: in test_mixed_behavior_performance
    _, total_time = measure_execution_time(process_pipeline)
converter/tests/performance/test_zmk_to_kanata_performance.py:81: in measure_execution_time
    result = func()
converter/tests/performance/test_zmk_to_kanata_performance.py:194: in process_pipeline
    layers = parser.parse_layers(zmk_input)
E   AttributeError: 'ZMKParser' object has no attribute 'parse_layers'. Did you mean: 'parse_layer'?
______________________________ test_memory_usage _______________________________
converter/tests/performance/test_zmk_to_kanata_performance.py:211: in test_memory_usage
    import psutil
E   ModuleNotFoundError: No module named 'psutil'
___________________________ test_parse_default_layer ___________________________
converter/tests/test_basic_remap.py:57: in test_parse_default_layer
    assert len(config.layers[0].keys[0]) == 2
E   AssertionError: assert 3 == 2
E    +  where 3 = len([KeyMapping(key='A', sticky=False, hold_tap=None, layer=None, macro=None, sticky_key=None, key_sequence=None, homerow_...ng(key='C', sticky=False, hold_tap=None, layer=None, macro=None, sticky_key=None, key_sequence=None, homerow_mod=None)])
_________________________ test_transform_default_layer _________________________
converter/tests/test_basic_remap.py:118: in test_transform_default_layer
    assert kanata_config.splitlines() == expected_lines
E   AssertionError: assert [';; ZMK to K...me 250)', ...] == [';; ZMK to K...me 250)', ...]
E
E     At index 8 diff: '  a  b  c' != '  a  b'
E     Use -v to get more diff
__________________________ test_parse_malformed_file ___________________________
converter/parser/zmk_parser.py:137: in parse
    raise ValueError("No layers found in ZMK file")
E   ValueError: No layers found in ZMK file

The above exception was the direct cause of the following exception:
converter/tests/test_basic_remap.py:190: in test_parse_malformed_file
    parser.parse(malformed_file)
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: No layers found in ZMK file
_________________________ test_custom_global_settings __________________________
converter/tests/test_global_settings.py:53: in test_custom_global_settings
    assert config.global_settings.tap_time == 300
E   AssertionError: assert 200 == 300
E    +  where 200 = GlobalSettings(tap_time=200, hold_time=250).tap_time
E    +    where GlobalSettings(tap_time=200, hold_time=250) = KeymapConfig(global_settings=GlobalSettings(tap_time=200, hold_time=250), layers=[Layer(name='default', bindings=[])]).global_settings
_________________________ test_partial_global_settings _________________________
converter/tests/test_global_settings.py:75: in test_partial_global_settings
    assert config.global_settings.tap_time == 300
E   AssertionError: assert 200 == 300
E    +  where 200 = GlobalSettings(tap_time=200, hold_time=250).tap_time
E    +    where GlobalSettings(tap_time=200, hold_time=250) = KeymapConfig(global_settings=GlobalSettings(tap_time=200, hold_time=250), layers=[Layer(name='default', bindings=[])]).global_settings
_________________________ test_invalid_global_settings _________________________
converter/tests/test_global_settings.py:95: in test_invalid_global_settings
    with pytest.raises(ParserError) as exc_info:
E   Failed: DID NOT RAISE <class 'converter.parser.parser_error.ParserError'>
________________________ test_malformed_global_settings ________________________
converter/tests/test_global_settings.py:117: in test_malformed_global_settings
    with pytest.raises(ParserError) as exc_info:
E   Failed: DID NOT RAISE <class 'converter.parser.parser_error.ParserError'>
______________________ test_basic_holdtap_transformation _______________________
converter/tests/test_holdtap_transformer.py:26: in test_basic_holdtap_transformation
    result = transformer.transform_binding(binding, 200, 250)
E   TypeError: HoldTapTransformer.transform_binding() takes 2 positional arguments but 4 were given
__________________________ test_holdtap_with_release ___________________________
converter/tests/test_holdtap_transformer.py:42: in test_holdtap_with_release
    result = transformer.transform_binding(binding, 200, 250)
E   TypeError: HoldTapTransformer.transform_binding() takes 2 positional arguments but 4 were given
_______________________ test_holdtap_with_key_positions ________________________
converter/tests/test_holdtap_transformer.py:58: in test_holdtap_with_key_positions
    result = transformer.transform_binding(binding, 200, 250)
E   TypeError: HoldTapTransformer.transform_binding() takes 2 positional arguments but 4 were given
_________________________ test_holdtap_with_retro_tap __________________________
converter/tests/test_holdtap_transformer.py:74: in test_holdtap_with_retro_tap
    result = transformer.transform_binding(binding, 200, 250)
E   TypeError: HoldTapTransformer.transform_binding() takes 2 positional arguments but 4 were given
_______________________ test_full_keymap_transformation ________________________
converter/tests/test_holdtap_transformer.py:155: in test_full_keymap_transformation
    assert result.splitlines() == expected_lines
E   AssertionError: assert [';; ZMK to K...me 250)', ...] == [';; ZMK to K...me 250)', ...]
E
E     At index 10 diff: '  lh_hm_LGUI_A (tap-hold-release 200 250 a lmet)' != '  lh_hm_LCTRL_S (tap-hold-release-keys 200 250 s lctl (1 2))'
E     Use -v to get more diff
____________________________ test_basic_conversion _____________________________
converter/tests/test_integration.py:57: in test_basic_conversion
    assert written_content.splitlines() == expected_lines
E   AssertionError: assert [';; ZMK to K...me 250)', ...] == [';; ZMK to K...me 300)', ...]
E
E     At index 5 diff: '(defvar hold-time 250)' != '(defvar hold-time 300)'
E     Right contains 2 more items, first extra item: '  i  j  k  l'
E     Use -v to get more diff
_____________________________ test_multiple_layers _____________________________
converter/tests/test_layer_parsing.py:53: in test_multiple_layers
    assert len(config.layers[0].bindings) == 1
E   AssertionError: assert 0 == 1
E    +  where 0 = len([])
E    +    where [] = Layer(name='first', bindings=[]).bindings
___________________________ test_multiline_bindings ____________________________
converter/tests/test_layer_parsing.py:78: in test_multiline_bindings
    assert len(config.layers[0].bindings) == 3
E   AssertionError: assert 0 == 3
E    +  where 0 = len([])
E    +    where [] = Layer(name='test', bindings=[]).bindings
____________________________ test_missing_bindings _____________________________
converter/tests/test_layer_parsing.py:115: in test_missing_bindings
    with pytest.raises(ParserError):
E   Failed: DID NOT RAISE <class 'converter.parser.parser_error.ParserError'>
____________________________ test_transform_binding ____________________________
converter/tests/test_layer_transformer.py:16: in test_transform_binding
    assert transformer.transform_binding(KeyMapping(key="N1")) == "1"
E   AssertionError: assert 'n1' == '1'
E
E     - 1
E     + n1
__________________________ test_parse_binding_matrix ___________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: trans

During handling of the above exception, another exception occurred:
converter/tests/test_layer_transformer.py:78: in test_parse_binding_matrix
    [KeyMapping(key="trans"), KeyMapping(key="C")]
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: trans
______________________ TestMacroParser.test_parse_binding ______________________
converter/tests/test_macro.py:170: in test_parse_binding
    binding = self.parser.parse_binding("&test_macro")
converter/parser/macro_parser.py:178: in parse_binding
    return MacroBindingElement.from_zmk(binding_str, self.behaviors)
E   AttributeError: type object 'MacroBindingElement' has no attribute 'from_zmk'
__________________ TestMacroIntegration.test_macro_conversion __________________
converter/parser/zmk_parser.py:137: in parse
    raise ValueError("No layers found in ZMK file")
E   ValueError: No layers found in ZMK file

The above exception was the direct cause of the following exception:
converter/zmk_to_kanata.py:65: in convert_zmk_to_kanata
    keymap_config = parser.parse(Path(tmp_path))
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: No layers found in ZMK file

During handling of the above exception, another exception occurred:
converter/tests/test_macro_integration.py:51: in test_macro_conversion
    kanata_content = convert_zmk_to_kanata(temp_file_path)
converter/zmk_to_kanata.py:101: in convert_zmk_to_kanata
    error_mgr.add_error(
converter/error_handling/error_manager.py:128: in add_error
    raise Exception(str(error))
E   Exception: ERROR: [converter] - Error during conversion: Failed to parse ZMK file: No layers found in ZMK file
------------------------------ Captured log call -------------------------------
ERROR    converter.error_handling.error_manager:error_manager.py:145 ERROR: [converter] - Error during conversion: Failed to parse ZMK file: No layers found in ZMK file
______________________________ test_complex_macro ______________________________
converter/tests/test_macro_parser.py:54: in test_complex_macro
    parser.process_line("            bindings = <")
converter/parser/macro_parser_v2.py:84: in process_line
    self._handle_setting(stripped_line)
converter/parser/macro_parser_v2.py:93: in _handle_setting
    raise ParserError("Invalid setting format")
E   converter.parser.parser_error.ParserError: Invalid setting format
_________________________ test_invalid_macro_settings __________________________
converter/tests/test_macro_parser.py:97: in test_invalid_macro_settings
    assert "Invalid setting format" in str(exc_info.value)
E   AssertionError: assert 'Invalid setting format' in 'Invalid wait-ms value'
E    +  where 'Invalid wait-ms value' = str(ParserError('Invalid wait-ms value'))
E    +    where ParserError('Invalid wait-ms value') = <ExceptionInfo ParserError('Invalid wait-ms value') tblen=3>.value
______________________________ test_nested_macros ______________________________
converter/tests/test_macro_parser.py:117: in test_nested_macros
    with pytest.raises(ParserError) as exc_info:
E   Failed: DID NOT RAISE <class 'converter.parser.parser_error.ParserError'>
___________________________ test_parameterized_macro ___________________________
converter/tests/test_macro_parser.py:129: in test_parameterized_macro
    parser.process_line("            compatible = ")
converter/parser/macro_parser_v2.py:84: in process_line
    self._handle_setting(stripped_line)
converter/parser/macro_parser_v2.py:93: in _handle_setting
    raise ParserError("Invalid setting format")
E   converter.parser.parser_error.ParserError: Invalid setting format
_________________________ test_complex_binding_formats _________________________
converter/tests/test_macro_parser_edge_cases.py:14: in test_complex_binding_formats
    parser.process_line("            bindings = <")
converter/parser/macro_parser_v2.py:84: in process_line
    self._handle_setting(stripped_line)
converter/parser/macro_parser_v2.py:93: in _handle_setting
    raise ParserError("Invalid setting format")
E   converter.parser.parser_error.ParserError: Invalid setting format
_____________________________ test_error_recovery ______________________________
converter/tests/test_macro_parser_edge_cases.py:65: in test_error_recovery
    assert "Invalid binding format" in str(exc_info.value)
E   AssertionError: assert 'Invalid binding format' in 'Invalid setting format'
E    +  where 'Invalid setting format' = str(ParserError('Invalid setting format'))
E    +    where ParserError('Invalid setting format') = <ExceptionInfo ParserError('Invalid setting format') tblen=3>.value
____________________________ test_state_transitions ____________________________
converter/tests/test_macro_parser_edge_cases.py:109: in test_state_transitions
    parser.process_line("            bindings = <")
converter/parser/macro_parser_v2.py:84: in process_line
    self._handle_setting(stripped_line)
converter/parser/macro_parser_v2.py:93: in _handle_setting
    raise ParserError("Invalid setting format")
E   converter.parser.parser_error.ParserError: Invalid setting format
________________________ test_invalid_state_transitions ________________________
converter/tests/test_macro_parser_edge_cases.py:155: in test_invalid_state_transitions
    with pytest.raises(ParserError) as exc_info:
E   Failed: DID NOT RAISE <class 'converter.parser.parser_error.ParserError'>
_________________________ test_layer_pattern_matching __________________________
converter/tests/test_parser_debug.py:27: in test_layer_pattern_matching
    print("\nBindings pattern:", parser.bindings_pattern.pattern)
E   AttributeError: 'ZMKParser' object has no attribute 'bindings_pattern'. Did you mean: 'binding_parser'?
----------------------------- Captured stdout call -----------------------------

Sample text:

    / {
        keymap {
            compatible = "zmk,keymap";
            default_layer {
                bindings = <
                    &kp A &kp B
                    &kp C &kp D
                >;
            };
        };
    };

______________________________ test_row_splitting ______________________________
converter/tests/test_parser_debug.py:80: in test_row_splitting
    keys = parser._parse_bindings(binding_text)
E   AttributeError: 'ZMKParser' object has no attribute '_parse_bindings'. Did you mean: 'parse_binding'?
__________________________ test_key_mapping_creation ___________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: trans

During handling of the above exception, another exception occurred:
converter/tests/test_parser_debug.py:99: in test_key_mapping_creation
    mapping = KeyMapping(key=key)
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: trans
_________________________ test_global_pattern_matching _________________________
converter/tests/test_parser_debug.py:115: in test_global_pattern_matching
    match = parser.global_pattern.search(sample_text)
E   AttributeError: 'ZMKParser' object has no attribute 'global_pattern'
________________ TestTapHoldKeymap.test_parse_hold_tap_binding _________________
converter/tests/test_taphold_keymap.py:29: in test_parse_hold_tap_binding
    layers = self.parser.parse_zmk_file(zmk_content)
converter/layer_parser.py:218: in parse_zmk_file
    binding = self.parse_binding(binding_str)
converter/layer_parser.py:108: in parse_binding
    binding = self.macro_parser.parse_binding(binding_str)
converter/parser/macro_parser.py:178: in parse_binding
    return MacroBindingElement.from_zmk(binding_str, self.behaviors)
E   AttributeError: type object 'MacroBindingElement' has no attribute 'from_zmk'
________________ TestUnicodeIntegration.test_unicode_conversion ________________
converter/parser/zmk_parser.py:137: in parse
    raise ValueError("No layers found in ZMK file")
E   ValueError: No layers found in ZMK file

The above exception was the direct cause of the following exception:
converter/zmk_to_kanata.py:65: in convert_zmk_to_kanata
    keymap_config = parser.parse(Path(tmp_path))
converter/parser/zmk_parser.py:146: in parse
    raise ParserError(f"Failed to parse ZMK file: {e}") from e
E   converter.parser.parser_error.ParserError: Failed to parse ZMK file: No layers found in ZMK file

During handling of the above exception, another exception occurred:
converter/tests/test_unicode_integration.py:42: in test_unicode_conversion
    kanata_content = convert_zmk_to_kanata(temp_file_path)
converter/zmk_to_kanata.py:101: in convert_zmk_to_kanata
    error_mgr.add_error(
converter/error_handling/error_manager.py:128: in add_error
    raise Exception(str(error))
E   Exception: ERROR: [converter] - Error during conversion: Failed to parse ZMK file: No layers found in ZMK file
------------------------------ Captured log call -------------------------------
ERROR    converter.error_handling.error_manager:error_manager.py:145 ERROR: [converter] - Error during conversion: Failed to parse ZMK file: No layers found in ZMK file
________________________________ test_layer_tap ________________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: lt(1,A)

During handling of the above exception, another exception occurred:
converter/tests/unit/parser/test_binding_parser.py:40: in test_layer_tap
    result = parser.parse(binding)
converter/parser/binding_parser.py:93: in parse
    return self._parse_simple_binding(f"{behavior} {' '.join(params)}".strip(), line_number)
converter/parser/binding_parser.py:318: in _parse_simple_binding
    return KeyMapping(
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: lt(1,A)
_________________________________ test_mod_tap _________________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: mt(LSHIFT,A)

During handling of the above exception, another exception occurred:
converter/tests/unit/parser/test_binding_parser.py:53: in test_mod_tap
    result = parser.parse(binding)
converter/parser/binding_parser.py:93: in parse
    return self._parse_simple_binding(f"{behavior} {' '.join(params)}".strip(), line_number)
converter/parser/binding_parser.py:318: in _parse_simple_binding
    return KeyMapping(
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: mt(LSHIFT,A)
_____________________________ test_layer_behaviors _____________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: mo(1)

During handling of the above exception, another exception occurred:
converter/tests/unit/parser/test_binding_parser.py:66: in test_layer_behaviors
    result = parser.parse(binding)
converter/parser/binding_parser.py:93: in parse
    return self._parse_simple_binding(f"{behavior} {' '.join(params)}".strip(), line_number)
converter/parser/binding_parser.py:298: in _parse_simple_binding
    return KeyMapping(key=f"{behavior}({params[0]})")
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: mo(1)
_______________________________ test_transparent _______________________________
converter/tests/unit/parser/test_binding_parser.py:75: in test_transparent
    assert result.key == "trans"
E   AssertionError: assert 'TRANS' == 'trans'
E
E     - trans
E     + TRANS
_____________________________ test_nested_bindings _____________________________
converter/tests/unit/parser/test_binding_parser.py:86: in test_nested_bindings
    result = parser.parse(binding)
converter/parser/binding_parser.py:93: in parse
    return self._parse_simple_binding(f"{behavior} {' '.join(params)}".strip(), line_number)
converter/parser/binding_parser.py:241: in _parse_simple_binding
    self._validate_behavior(behavior, params, binding, line_number)
converter/parser/binding_parser.py:352: in _validate_behavior
    self._report_error(
converter/parser/binding_parser.py:382: in _report_error
    self.error_manager.add_error(
converter/error_handling/error_manager.py:128: in add_error
    raise Exception(str(error))
E   Exception: ERROR: [binding_parser] - Behavior 'lt' expects 2 parameters, got 3
------------------------------ Captured log call -------------------------------
ERROR    converter.error_handling.error_manager:error_manager.py:145 ERROR: [binding_parser] - Behavior 'lt' expects 2 parameters, got 3
____________________________ test_invalid_bindings _____________________________
converter/tests/unit/parser/test_binding_parser.py:104: in test_invalid_bindings
    parser.parse(binding)
converter/parser/binding_parser.py:100: in parse
    return self._parse_simple_binding(binding, line_number)
converter/parser/binding_parser.py:229: in _parse_simple_binding
    self._report_error(
converter/parser/binding_parser.py:382: in _report_error
    self.error_manager.add_error(
converter/error_handling/error_manager.py:128: in add_error
    raise Exception(str(error))
E   Exception: ERROR: [binding_parser] - Empty binding parts
------------------------------ Captured log call -------------------------------
ERROR    converter.error_handling.error_manager:error_manager.py:145 ERROR: [binding_parser] - Empty binding parts
_________________________ test_invalid_nested_bindings _________________________
converter/tests/unit/parser/test_binding_parser.py:120: in test_invalid_nested_bindings
    parser.parse(binding)
converter/parser/binding_parser.py:93: in parse
    return self._parse_simple_binding(f"{behavior} {' '.join(params)}".strip(), line_number)
converter/parser/binding_parser.py:241: in _parse_simple_binding
    self._validate_behavior(behavior, params, binding, line_number)
converter/parser/binding_parser.py:352: in _validate_behavior
    self._report_error(
converter/parser/binding_parser.py:382: in _report_error
    self.error_manager.add_error(
converter/error_handling/error_manager.py:128: in add_error
    raise Exception(str(error))
E   Exception: ERROR: [binding_parser] - Behavior 'lt' expects 2 parameters, got 3
------------------------------ Captured log call -------------------------------
ERROR    converter.error_handling.error_manager:error_manager.py:145 ERROR: [binding_parser] - Behavior 'lt' expects 2 parameters, got 3
___________________________ test_invalid_parameters ____________________________
converter/tests/unit/parser/test_binding_parser.py:134: in test_invalid_parameters
    with pytest.raises(BindingParseError) as exc_info:
E   Failed: DID NOT RAISE <class 'converter.parser.binding_parser.BindingParseError'>
------------------------------ Captured log call -------------------------------
ERROR    converter.error_handling.error_manager:error_manager.py:145 ERROR: [binding_parser] - Invalid key 'INVALID': Invalid key: INVALID, treating as transparent
___________________________ test_whitespace_handling ___________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: lt(1,A)

During handling of the above exception, another exception occurred:
converter/tests/unit/parser/test_binding_parser.py:150: in test_whitespace_handling
    result = parser.parse(binding)
converter/parser/binding_parser.py:93: in parse
    return self._parse_simple_binding(f"{behavior} {' '.join(params)}".strip(), line_number)
converter/parser/binding_parser.py:318: in _parse_simple_binding
    return KeyMapping(
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: lt(1,A)
__________________________ test_parse_binding_success __________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: test

During handling of the above exception, another exception occurred:
converter/tests/unit/parser/test_error_recovery_wrapper.py:46: in test_parse_binding_success
    mock_binding = KeyMapping("test")
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: test
________________________ test_parse_binding_value_error ________________________
converter/parser/error_recovery_wrapper.py:66: in parse_binding
    return self.parser.parse_binding(line)
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1169: in __call__
    return self._mock_call(*args, **kwargs)
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1173: in _mock_call
    return self._execute_mock_call(*args, **kwargs)
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:1228: in _execute_mock_call
    raise effect
E   ValueError: Invalid binding

During handling of the above exception, another exception occurred:
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: unknown

During handling of the above exception, another exception occurred:
converter/tests/unit/parser/test_error_recovery_wrapper.py:68: in test_parse_binding_value_error
    result = wrapper.parse_binding("invalid", 1)
converter/parser/error_recovery_wrapper.py:71: in parse_binding
    return self.error_manager.handle_invalid_binding(
converter/error_recovery.py:161: in handle_invalid_binding
    return KeyMapping(key="unknown")
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: unknown
------------------------------ Captured log call -------------------------------
WARNING  converter.parser.error_recovery_wrapper:error_recovery_wrapper.py:68 Line 1: Invalid binding: Invalid binding
WARNING  converter.error_recovery:error_recovery.py:159 Line 1: Invalid binding 'invalid' converted to unknown
_________________________ test_parse_layer_value_error _________________________
converter/tests/unit/parser/test_error_recovery_wrapper.py:104: in test_parse_layer_value_error
    assert result is None
E   AssertionError: assert Layer(name='test', bindings=[]) is None
------------------------------ Captured log call -------------------------------
WARNING  converter.parser.error_recovery_wrapper:error_recovery_wrapper.py:103 Line 1: Invalid layer test: Invalid layer
ERROR    converter.error_recovery:error_recovery.py:77 Line 1: Invalid layer 'test' - created empty layer
______________________________ test_error_summary ______________________________
converter/tests/unit/parser/test_error_recovery_wrapper.py:124: in test_error_summary
    assert result == {"errors": []}
E   AssertionError: assert {'error_types...al_errors': 0} == {'errors': []}
E
E     Omitting 1 identical items, use -vv to show
E     Left contains 2 more items:
E     {'error_types': {}, 'total_errors': 0}
E     Use -v to get more diff
_______________________________ test_has_errors ________________________________
converter/tests/unit/parser/test_error_recovery_wrapper.py:142: in test_has_errors
    mock_manager.return_value.has_errors.assert_called_once()
/opt/homebrew/Cellar/python@3.13/3.13.3/Frameworks/Python.framework/Versions/3.13/lib/python3.13/unittest/mock.py:958: in assert_called_once
    raise AssertionError(msg)
E   AssertionError: Expected 'has_errors' to have been called once. Called 0 times.
_______________________ test_nested_hold_tap_with_layer ________________________
converter/tests/unit/test_complex_bindings.py:21: in test_nested_hold_tap_with_layer
    assert binding.to_kanata() == '@ht_mo_1_A'
E   AssertionError: assert '@ht_mo 1_A' == '@ht_mo_1_A'
E
E     - @ht_mo_1_A
E     ?       ^
E     + @ht_mo 1_A
E     ?       ^
__________________________ test_hold_tap_with_sticky ___________________________
converter/tests/unit/test_complex_bindings.py:36: in test_hold_tap_with_sticky
    assert binding.to_kanata() == '@ht_sticky-lsft_b'
E   AssertionError: assert '@ht_LSHIFT_B' == '@ht_sticky-lsft_b'
E
E     - @ht_sticky-lsft_b
E     + @ht_LSHIFT_B
__________________________ test_multi_layer_sequence ___________________________
converter/tests/unit/test_complex_bindings.py:51: in test_multi_layer_sequence
    assert layer.to_kanata() == expected
E   AssertionError: assert '(deflayer te...le-held 3)\n)' == '(deflayer te...le-held 3)\n)'
E
E     Skipping 34 identical leading characters in diff, use -v to show
E     - e-held 1) (layer-switch 2) (layer-while-held 3)
E     ?           ---------- ^^  -
E     + e-held 1) to 2 (layer-while-held 3)
E     ?            ^
E       )
_________________________ test_complex_modifier_chain __________________________
converter/tests/unit/test_complex_bindings.py:67: in test_complex_modifier_chain
    assert layer.to_kanata() == expected
E   AssertionError: assert '(deflayer te...ft lctrl a\n)' == '(deflayer te...sft lctl a\n)'
E
E       (deflayer test_layer
E     -   sticky-lsft lctl a
E     +   sticky-lsft lctrl a
E     ?                  +
E       )
___________________________ test_mixed_case_handling ___________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: Ctrl

During handling of the above exception, another exception occurred:
converter/tests/unit/test_complex_bindings.py:74: in test_mixed_case_handling
    KeyMapping(key='Ctrl'),    # Mixed case
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: Ctrl
________________________ test_special_key_combinations _________________________
converter/tests/unit/test_complex_bindings.py:99: in test_special_key_combinations
    assert layer.to_kanata() == expected
E   AssertionError: assert '(deflayer te...ne trans a\n)' == '(deflayer te...  none _ a\n)'
E
E       (deflayer test_layer
E     -   none _ a
E     ?        ^
E     +   none trans a
E     ?        ^^^^^
E       )
__________________________ test_complex_macro_binding __________________________
converter/tests/unit/test_complex_bindings.py:104: in test_complex_macro_binding
    macro = MacroBinding(
E   TypeError: MacroBinding.__init__() got an unexpected keyword argument 'name'
_________________________ test_layer_with_empty_slots __________________________
converter/tests/unit/test_complex_bindings.py:133: in test_layer_with_empty_slots
    assert layer.to_kanata() == expected
E   AssertionError: assert '(deflayer te... b trans c\n)' == '(deflayer te...none b _ c\n)'
E
E       (deflayer test_layer
E     -   a none b _ c
E     ?            ^
E     +   a none b trans c
E     ?            ^^^^^
E       )
_________________________ test_handle_invalid_binding __________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: unknown

During handling of the above exception, another exception occurred:
converter/tests/unit/test_error_recovery.py:10: in test_handle_invalid_binding
    result = manager.handle_invalid_binding("invalid", 1)
converter/error_recovery.py:161: in handle_invalid_binding
    return KeyMapping(key="unknown")
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: unknown
------------------------------ Captured log call -------------------------------
WARNING  converter.error_recovery:error_recovery.py:159 Line 1: Invalid binding 'invalid' converted to unknown
__________________________ test_handle_invalid_layer ___________________________
converter/tests/unit/test_error_recovery.py:36: in test_handle_invalid_layer
    assert errors["errors"][0]["content"] == "content"
E   KeyError: 'content'
------------------------------ Captured log call -------------------------------
ERROR    converter.error_recovery:error_recovery.py:77 Line 1: Invalid layer 'test' - created empty layer
_____________________________ test_multiple_errors _____________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: unknown

During handling of the above exception, another exception occurred:
converter/tests/unit/test_error_recovery.py:44: in test_multiple_errors
    manager.handle_invalid_binding("invalid1", 1)
converter/error_recovery.py:161: in handle_invalid_binding
    return KeyMapping(key="unknown")
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: unknown
------------------------------ Captured log call -------------------------------
WARNING  converter.error_recovery:error_recovery.py:159 Line 1: Invalid binding 'invalid1' converted to unknown
_______________________________ test_has_errors ________________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: unknown

During handling of the above exception, another exception occurred:
converter/tests/unit/test_error_recovery.py:73: in test_has_errors
    manager.handle_invalid_binding("invalid", 1)
converter/error_recovery.py:161: in handle_invalid_binding
    return KeyMapping(key="unknown")
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: unknown
------------------------------ Captured log call -------------------------------
WARNING  converter.error_recovery:error_recovery.py:159 Line 1: Invalid binding 'invalid' converted to unknown
_________________________ test_error_summary_structure _________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: unknown

During handling of the above exception, another exception occurred:
converter/tests/unit/test_error_recovery.py:80: in test_error_summary_structure
    manager.handle_invalid_binding("invalid", 1)
converter/error_recovery.py:161: in handle_invalid_binding
    return KeyMapping(key="unknown")
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: unknown
------------------------------ Captured log call -------------------------------
WARNING  converter.error_recovery:error_recovery.py:159 Line 1: Invalid binding 'invalid' converted to unknown
___________________________ test_homerow_mod_parser ____________________________
converter/tests/unit/test_homerow_mods.py:29: in test_homerow_mod_parser
    assert behavior.mod_key == "LCTL"
E   AttributeError: 'HomeRowModBehavior' object has no attribute 'mod_key'
_____________________ test_homerow_mod_behavior_kanata_mod _____________________
converter/tests/unit/test_homerow_mods.py:50: in test_homerow_mod_behavior_kanata_mod
    behavior = HomeRowModBehavior(mod_key="LCTL", tap_key="A")
E   TypeError: HomeRowModBehavior.__init__() got an unexpected keyword argument 'mod_key'
_____________________ test_homerow_mod_behavior_to_kanata ______________________
converter/tests/unit/test_homerow_mods.py:85: in test_homerow_mod_behavior_to_kanata
    behavior = HomeRowModBehavior(mod_key="LCTL", tap_key="A")
E   TypeError: HomeRowModBehavior.__init__() got an unexpected keyword argument 'mod_key'
_________________________ test_homerow_mod_transformer _________________________
converter/tests/unit/test_homerow_mods.py:107: in test_homerow_mod_transformer
    assert transformer.transform_binding(behavior) == "(tap-hold-release 200 200 a lctl)"
converter/transformer/homerow_mod_transformer.py:44: in transform_binding
    return behavior.to_kanata()
E   AttributeError: 'SimpleHomerowModBinding' object has no attribute 'to_kanata'
_________________________ test_validate_output_invalid _________________________
converter/tests/unit/test_pipeline_validator.py:198: in test_validate_output_invalid
    assert any("default layer" in error for error in errors)
E   assert False
E    +  where False = any(<generator object test_validate_output_invalid.<locals>.<genexpr> at 0x1025035e0>)
______________________ test_basic_holdtap_transformations ______________________
converter/tests/unit/transformer/test_holdtap_transformer.py:28: in test_basic_holdtap_transformations
    behavior = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
______________________ test_layer_holdtap_transformations ______________________
converter/tests/unit/transformer/test_holdtap_transformer.py:52: in test_layer_holdtap_transformations
    behavior = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
___________________ test_special_key_holdtap_transformations ___________________
converter/tests/unit/transformer/test_holdtap_transformer.py:69: in test_special_key_holdtap_transformations
    behavior = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
____________________ test_timing_parameter_transformations _____________________
converter/tests/unit/transformer/test_holdtap_transformer.py:94: in test_timing_parameter_transformations
    behavior = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
______________________ test_modifier_holdtap_combinations ______________________
converter/tests/unit/transformer/test_holdtap_transformer.py:114: in test_modifier_holdtap_combinations
    behavior = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
____________________________ test_basic_key_mapping ____________________________
converter/tests/unit/transformer/test_holdtap_transformer.py:137: in test_basic_key_mapping
    behavior = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
_________________________ test_layer_in_hold_position __________________________
converter/tests/unit/transformer/test_holdtap_transformer.py:149: in test_layer_in_hold_position
    hold=LayerBehavior(layer=1),
E   TypeError: LayerBehavior.__init__() got an unexpected keyword argument 'layer'. Did you mean 'label'?
_________________________ test_nested_holdtap_invalid __________________________
converter/tests/unit/transformer/test_holdtap_transformer.py:158: in test_nested_holdtap_invalid
    nested = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
__________________________ test_macro_in_hold_invalid __________________________
converter/tests/unit/transformer/test_holdtap_transformer.py:172: in test_macro_in_hold_invalid
    behavior = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
________________________ test_sticky_key_in_tap_invalid ________________________
converter/tests/unit/transformer/test_holdtap_transformer.py:184: in test_sticky_key_in_tap_invalid
    tap=StickyKeyBehavior(key=KeyMapping(key="LCTRL"))
E   TypeError: StickyKeyBehavior.__init__() got an unexpected keyword argument 'key'
_______________________ test_key_sequence_in_tap_invalid _______________________
converter/tests/unit/transformer/test_holdtap_transformer.py:192: in test_key_sequence_in_tap_invalid
    behavior = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
_________________________ test_both_positions_invalid __________________________
converter/tests/unit/transformer/test_holdtap_transformer.py:202: in test_both_positions_invalid
    nested_hold = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
_________________________ test_multiple_layers_invalid _________________________
converter/tests/unit/transformer/test_holdtap_transformer.py:219: in test_multiple_layers_invalid
    hold=LayerBehavior(layer=1),
E   TypeError: LayerBehavior.__init__() got an unexpected keyword argument 'layer'. Did you mean 'label'?
______________________ test_empty_holdtap_transformations ______________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:180: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Empty key

During handling of the above exception, another exception occurred:
converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py:18: in test_empty_holdtap_transformations
    hold=KeyMapping(key=""),
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Empty key
________________________ test_invalid_timing_parameters ________________________
converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py:41: in test_invalid_timing_parameters
    behavior = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
________________________ test_special_character_holdtap ________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: é

During handling of the above exception, another exception occurred:
converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py:72: in test_special_character_holdtap
    hold=KeyMapping(key="é"),
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: é
_______________________ test_mixed_case_transformations ________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: a

During handling of the above exception, another exception occurred:
converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py:101: in test_mixed_case_transformations
    hold=KeyMapping(key="a"),
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: a
________________________ test_nested_holdtap_behaviors _________________________
converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py:124: in test_nested_holdtap_behaviors
    nested = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
_________________________ test_boundary_timing_values __________________________
converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py:147: in test_boundary_timing_values
    behavior = HoldTapBehavior(
E   TypeError: HoldTapBehavior.__init__() got an unexpected keyword argument 'hold'
________________________ test_basic_key_transformations ________________________
converter/tests/unit/transformer/test_layer_transformer.py:21: in test_basic_key_transformations
    assert transformer.transform_binding(KeyMapping(key="N1")) == "1"
E   AssertionError: assert 'n1' == '1'
E
E     - 1
E     + n1
______________________ test_layer_control_transformations ______________________
converter/tests/unit/transformer/test_layer_transformer.py:69: in test_layer_control_transformations
    assert transformer.transform_binding(KeyMapping(key="mo 1")) == "@layer1"
E   AssertionError: assert 'mo 1' == '@layer1'
E
E     - @layer1
E     + mo 1
_____________________ test_binding_matrix_transformations ______________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: trans

During handling of the above exception, another exception occurred:
converter/tests/unit/transformer/test_layer_transformer.py:145: in test_binding_matrix_transformations
    [KeyMapping(key="trans"), KeyMapping(key="C")]
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: trans
_______________________ test_empty_layer_transformation ________________________
converter/tests/unit/transformer/test_layer_transformer_edge_cases.py:19: in test_empty_layer_transformation
    assert len(result.split()) == 2  # Only contains deflayer and name
E   AssertionError: assert 3 == 2
E    +  where 3 = len(['(deflayer', 'empty', ')'])
E    +    where ['(deflayer', 'empty', ')'] = <built-in method split of str object at 0x1025f1cb0>()
E    +      where <built-in method split of str object at 0x1025f1cb0> = '(deflayer empty\n  \n)'.split
________________________ test_layer_with_empty_bindings ________________________
converter/tests/unit/transformer/test_layer_transformer_edge_cases.py:30: in test_layer_with_empty_bindings
    assert "_ a _ b" in result
E   AssertionError: assert '_ a _ b' in '(deflayer test\n  None a None b\n)'
__________________________ test_complex_key_sequences __________________________
converter/tests/unit/transformer/test_layer_transformer_edge_cases.py:37: in test_complex_key_sequences
    assert transformer.transform_binding(empty_seq) == "(chord)"
E   AssertionError: assert '(chord )' == '(chord)'
E
E     - (chord)
E     + (chord )
E     ?       +
__________________________ test_invalid_key_mappings ___________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:180: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Empty key

During handling of the above exception, another exception occurred:
converter/tests/unit/transformer/test_layer_transformer_edge_cases.py:51: in test_invalid_key_mappings
    assert transformer.transform_binding(KeyMapping(key="")) == "_"
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Empty key
__________________________ test_layer_name_edge_cases __________________________
converter/tests/unit/transformer/test_layer_transformer_edge_cases.py:76: in test_layer_name_edge_cases
    assert "(deflayer test_layer" in result
E   AssertionError: assert '(deflayer test_layer' in '(deflayer test layer\n  a\n)'
______________________ test_nested_matrix_transformations ______________________
converter/tests/unit/transformer/test_layer_transformer_edge_cases.py:90: in test_nested_matrix_transformations
    assert all(all(item == "_" for item in row) for row in result)
E   assert False
E    +  where False = all(<generator object test_nested_matrix_transformations.<locals>.<genexpr> at 0x1024bdfc0>)
____________________ test_special_character_transformations ____________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: é

During handling of the above exception, another exception occurred:
converter/tests/unit/transformer/test_layer_transformer_edge_cases.py:109: in test_special_character_transformations
    KeyMapping(key="é")
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: é
___________________ test_transform_definition_invalid_steps ____________________
converter/tests/unit/transformer/test_macro_transformer.py:47: in test_transform_definition_invalid_steps
    get_error_manager().clear_errors()
E   AttributeError: 'ErrorManager' object has no attribute 'clear_errors'. Did you mean: 'get_errors'?
_______________________ test_empty_macro_transformations _______________________
converter/tests/unit/transformer/test_macro_transformer_edge_cases.py:29: in test_empty_macro_transformations
    behavior = MacroBehavior(
E   TypeError: MacroBehavior.__init__() got an unexpected keyword argument 'keys'
________________________ test_invalid_timing_parameters ________________________
converter/tests/unit/transformer/test_macro_transformer_edge_cases.py:39: in test_invalid_timing_parameters
    behavior = MacroBehavior(
E   TypeError: MacroBehavior.__init__() got an unexpected keyword argument 'keys'
_________________________ test_boundary_timing_values __________________________
converter/tests/unit/transformer/test_macro_transformer_edge_cases.py:132: in test_boundary_timing_values
    behavior = MacroBehavior(
E   TypeError: MacroBehavior.__init__() got an unexpected keyword argument 'keys'
_____________________________ test_duplicate_keys ______________________________
converter/tests/unit/transformer/test_macro_transformer_edge_cases.py:175: in test_duplicate_keys
    behavior = MacroBehavior(
E   TypeError: MacroBehavior.__init__() got an unexpected keyword argument 'keys'
____________________ test_basic_sticky_key_transformations _____________________
converter/tests/unit/transformer/test_sticky_key_transformer.py:16: in test_basic_sticky_key_transformations
    assert transformer.transform_binding(SimpleBinding("LSHIFT")) == "(sticky-key lshift)"
E   AssertionError: assert 'sticky-lsft' == '(sticky-key lshift)'
E
E     - (sticky-key lshift)
E     + sticky-lsft
__________________________ test_modifier_combinations __________________________
converter/tests/unit/transformer/test_sticky_key_transformer.py:22: in test_modifier_combinations
    assert transformer.transform_binding(SimpleBinding("LSHIFT")) == "(sticky-key lshift)"
E   AssertionError: assert 'sticky-lsft' == '(sticky-key lshift)'
E
E     - (sticky-key lshift)
E     + sticky-lsft
___________________ test_special_key_sticky_transformations ____________________
converter/tests/unit/transformer/test_sticky_key_transformer.py:33: in test_special_key_sticky_transformations
    assert transformer.transform_binding(SimpleBinding("F1")) == "(sticky-key f1)"
E   AssertionError: assert 'sticky-f1' == '(sticky-key f1)'
E
E     - (sticky-key f1)
E     ? -       ----  -
E     + sticky-f1
______________________ test_layer_sticky_transformations _______________________
converter/tests/unit/transformer/test_sticky_key_transformer.py:39: in test_layer_sticky_transformations
    assert transformer.transform_binding(SimpleBinding("mo 1")) == "(sticky-key mo 1)"
E   AssertionError: assert 'sticky-@layer1' == '(sticky-key mo 1)'
E
E     - (sticky-key mo 1)
E     + sticky-@layer1
____________________ test_timing_parameter_transformations _____________________
converter/tests/unit/transformer/test_sticky_key_transformer.py:44: in test_timing_parameter_transformations
    assert transformer.transform_binding(SimpleBinding("LSHIFT")) == "(sticky-key lshift)"
E   AssertionError: assert 'sticky-lsft' == '(sticky-key lshift)'
E
E     - (sticky-key lshift)
E     + sticky-lsft
____________________ test_basic_key_sticky_transformations _____________________
converter/tests/unit/transformer/test_sticky_key_transformer.py:49: in test_basic_key_sticky_transformations
    assert transformer.transform_binding(SimpleBinding("A")) == "(sticky-key a)"
E   AssertionError: assert 'sticky-a' == '(sticky-key a)'
E
E     - (sticky-key a)
E     + sticky-a
____________________ test_empty_sticky_key_transformations _____________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:180: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Empty key

During handling of the above exception, another exception occurred:
converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py:17: in test_empty_sticky_key_transformations
    behavior = StickyKeyBehavior(key=KeyMapping(key=""))
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Empty key
________________________ test_invalid_timing_parameters ________________________
converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py:32: in test_invalid_timing_parameters
    behavior = StickyKeyBehavior(
E   TypeError: StickyKeyBehavior.__init__() got an unexpected keyword argument 'key'
______________________ test_special_character_sticky_keys ______________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: é

During handling of the above exception, another exception occurred:
converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py:59: in test_special_character_sticky_keys
    behavior = StickyKeyBehavior(key=KeyMapping(key="é"))
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: é
_______________________ test_mixed_case_transformations ________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: a

During handling of the above exception, another exception occurred:
converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py:77: in test_mixed_case_transformations
    behavior = StickyKeyBehavior(key=KeyMapping(key="a"))
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: a
_________________________ test_boundary_timing_values __________________________
converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py:101: in test_boundary_timing_values
    behavior = StickyKeyBehavior(
E   TypeError: StickyKeyBehavior.__init__() got an unexpected keyword argument 'key'
_________________________ test_nested_sticky_behaviors _________________________
converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py:120: in test_nested_sticky_behaviors
    nested = StickyKeyBehavior(key=KeyMapping(key="A"))
E   TypeError: StickyKeyBehavior.__init__() got an unexpected keyword argument 'key'
________________________ test_invalid_key_combinations _________________________
converter/model/keymap_model.py:54: in __post_init__
    validate_key(self.key)
converter/validation/key_validator.py:243: in validate_key
    raise KeyValidationError(
E   converter.validation.key_validator.KeyValidationError: Invalid key: INVALID_MOD

During handling of the above exception, another exception occurred:
converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py:134: in test_invalid_key_combinations
    behavior = StickyKeyBehavior(key=KeyMapping(key="INVALID_MOD"))
<string>:11: in __init__
    ???
converter/model/keymap_model.py:57: in __post_init__
    raise ValueError(msg)
E   ValueError: Invalid key mapping: Invalid key: INVALID_MOD
=========================== short test summary info ============================
FAILED converter/tests/e2e_tests/test_advanced_features.py::test_multi_layer_with_hold_tap
FAILED converter/tests/e2e_tests/test_advanced_features.py::test_multi_layer_with_custom_behaviors
FAILED converter/tests/e2e_tests/test_cli.py::test_basic_file_conversion - as...
FAILED converter/tests/e2e_tests/test_cli.py::test_missing_input_file - Syste...
FAILED converter/tests/e2e_tests/test_cli.py::test_invalid_input_format - Sys...
FAILED converter/tests/e2e_tests/test_cli.py::test_invalid_output_path - asse...
FAILED converter/tests/e2e_tests/test_file_operations.py::test_output_file_format
FAILED converter/tests/e2e_tests/test_homerow_mods.py::test_homerow_mods_conversion
FAILED converter/tests/e2e_tests/test_homerow_mods.py::test_homerow_mods_mac_conversion
FAILED converter/tests/e2e_tests/test_input_formats.py::test_single_layer_keymap
FAILED converter/tests/e2e_tests/test_input_formats.py::test_multiple_layer_keymap
FAILED converter/tests/e2e_tests/test_input_formats.py::test_empty_layer_keymap
FAILED converter/tests/e2e_tests/test_input_formats.py::test_comments_and_whitespace
FAILED converter/tests/e2e_tests/test_macro.py::test_basic_macro_conversion
FAILED converter/tests/e2e_tests/test_macro.py::test_complex_macro_conversion
FAILED converter/tests/e2e_tests/test_macro.py::test_parameterized_macro_conversion
FAILED converter/tests/e2e_tests/test_output_validation.py::test_output_file_permissions
FAILED converter/tests/e2e_tests/test_output_validation.py::test_output_file_encoding
FAILED converter/tests/e2e_tests/test_output_validation.py::test_output_file_format
FAILED converter/tests/e2e_tests/test_output_validation.py::test_kanata_s_expression_conformity
FAILED converter/tests/e2e_tests/test_real_world_configs.py::test_qwerty_standard_layout
FAILED converter/tests/e2e_tests/test_real_world_configs.py::test_colemak_layout
FAILED converter/tests/e2e_tests/test_real_world_configs.py::test_split_keyboard_layout
FAILED converter/tests/e2e_tests/test_real_world_configs.py::test_ergonomic_layout_with_homerow_mods
FAILED converter/tests/e2e_tests/test_real_world_configs.py::test_ben_vallack_cradio_layout
FAILED converter/tests/e2e_tests/test_real_world_configs.py::test_dvorak_layout
FAILED converter/tests/e2e_tests/test_real_world_configs.py::test_ergonomic_kyria_layout
FAILED converter/tests/e2e_tests/test_sticky_keys.py::test_sticky_key_basic
FAILED converter/tests/e2e_tests/test_sticky_keys.py::test_sticky_key_advanced
FAILED converter/tests/integration/end_to_end/test_end_to_end.py::test_basic_conversion_pipeline
FAILED converter/tests/integration/end_to_end/test_end_to_end.py::test_complex_binding_conversion
FAILED converter/tests/integration/end_to_end/test_end_to_end.py::test_macro_conversion
FAILED converter/tests/integration/end_to_end/test_end_to_end.py::test_error_recovery
FAILED converter/tests/integration/end_to_end/test_end_to_end.py::test_multiple_layer_conversion
FAILED converter/tests/integration/end_to_end/test_end_to_end.py::test_global_settings
FAILED converter/tests/integration/end_to_end/test_real_world_examples.py::test_corne_keymap_conversion
FAILED converter/tests/integration/end_to_end/test_real_world_examples.py::test_ferris_sweep_keymap
FAILED converter/tests/integration/test_binding_parser_integration.py::test_basic_binding_integration
FAILED converter/tests/integration/test_binding_parser_integration.py::test_complex_binding_integration
FAILED converter/tests/integration/test_binding_parser_integration.py::test_nested_binding_integration
FAILED converter/tests/integration/test_binding_parser_integration.py::test_error_recovery_integration
FAILED converter/tests/integration/test_binding_parser_integration.py::test_multiline_binding_integration
FAILED converter/tests/integration/test_binding_parser_integration.py::test_inline_binding_integration
FAILED converter/tests/integration/test_binding_parser_integration.py::test_multiple_layers_integration
FAILED converter/tests/integration/test_error_recovery_integration.py::test_invalid_binding_recovery
FAILED converter/tests/integration/test_error_recovery_integration.py::test_invalid_layer_recovery
FAILED converter/tests/integration/test_error_recovery_integration.py::test_multiple_error_recovery
FAILED converter/tests/integration/test_error_recovery_integration.py::test_nested_behavior_recovery
FAILED converter/tests/integration/test_error_recovery_integration.py::test_error_recovery_with_comments
FAILED converter/tests/integration/test_error_recovery_integration.py::test_error_recovery_preserves_valid_content
FAILED converter/tests/integration/test_key_validation.py::test_key_validation_with_hold_tap
FAILED converter/tests/integration/test_zmk_to_kanata_conversion.py::test_basic_layer_conversion
FAILED converter/tests/integration/test_zmk_to_kanata_conversion.py::test_holdtap_conversion
FAILED converter/tests/integration/test_zmk_to_kanata_conversion.py::test_macro_conversion
FAILED converter/tests/integration/test_zmk_to_kanata_conversion.py::test_sticky_key_conversion
FAILED converter/tests/integration/test_zmk_to_kanata_conversion.py::test_complex_layer_conversion
FAILED converter/tests/integration/test_zmk_to_kanata_conversion.py::test_mixed_behavior_conversion
FAILED converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py::test_empty_layer_conversion
FAILED converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py::test_invalid_macro_conversion
FAILED converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py::test_nested_behavior_conversion
FAILED converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py::test_invalid_layer_references
FAILED converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py::test_special_character_conversion
FAILED converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py::test_mixed_timing_parameters
FAILED converter/tests/integration/test_zmk_to_kanata_conversion_edge_cases.py::test_malformed_input_recovery
FAILED converter/tests/integration/test_zmk_to_kanata_error_handling.py::test_syntax_error_recovery
FAILED converter/tests/integration/test_zmk_to_kanata_error_handling.py::test_missing_required_fields
FAILED converter/tests/integration/test_zmk_to_kanata_error_handling.py::test_invalid_macro_definition_recovery
FAILED converter/tests/integration/test_zmk_to_kanata_error_handling.py::test_layer_validation_errors
FAILED converter/tests/integration/test_zmk_to_kanata_error_handling.py::test_binding_validation_errors
FAILED converter/tests/integration/test_zmk_to_kanata_error_handling.py::test_error_context_information
FAILED converter/tests/integration/test_zmk_to_kanata_error_handling.py::test_partial_recovery
FAILED converter/tests/integration/test_zmk_to_kanata_error_handling.py::test_error_recovery_strategies
FAILED converter/tests/performance/test_performance.py::test_parser_performance_small
FAILED converter/tests/performance/test_performance.py::test_parser_performance_large
FAILED converter/tests/performance/test_performance.py::test_transformer_performance
FAILED converter/tests/performance/test_performance.py::test_end_to_end_performance
FAILED converter/tests/performance/test_zmk_to_kanata_performance.py::test_large_layer_performance
FAILED converter/tests/performance/test_zmk_to_kanata_performance.py::test_complex_macro_performance
FAILED converter/tests/performance/test_zmk_to_kanata_performance.py::test_mixed_behavior_performance
FAILED converter/tests/performance/test_zmk_to_kanata_performance.py::test_memory_usage
FAILED converter/tests/test_basic_remap.py::test_parse_default_layer - Assert...
FAILED converter/tests/test_basic_remap.py::test_transform_default_layer - As...
FAILED converter/tests/test_basic_remap.py::test_parse_malformed_file - conve...
FAILED converter/tests/test_global_settings.py::test_custom_global_settings
FAILED converter/tests/test_global_settings.py::test_partial_global_settings
FAILED converter/tests/test_global_settings.py::test_invalid_global_settings
FAILED converter/tests/test_global_settings.py::test_malformed_global_settings
FAILED converter/tests/test_holdtap_transformer.py::test_basic_holdtap_transformation
FAILED converter/tests/test_holdtap_transformer.py::test_holdtap_with_release
FAILED converter/tests/test_holdtap_transformer.py::test_holdtap_with_key_positions
FAILED converter/tests/test_holdtap_transformer.py::test_holdtap_with_retro_tap
FAILED converter/tests/test_holdtap_transformer.py::test_full_keymap_transformation
FAILED converter/tests/test_integration.py::test_basic_conversion - Assertion...
FAILED converter/tests/test_layer_parsing.py::test_multiple_layers - Assertio...
FAILED converter/tests/test_layer_parsing.py::test_multiline_bindings - Asser...
FAILED converter/tests/test_layer_parsing.py::test_missing_bindings - Failed:...
FAILED converter/tests/test_layer_transformer.py::test_transform_binding - As...
FAILED converter/tests/test_layer_transformer.py::test_parse_binding_matrix
FAILED converter/tests/test_macro.py::TestMacroParser::test_parse_binding - A...
FAILED converter/tests/test_macro_integration.py::TestMacroIntegration::test_macro_conversion
FAILED converter/tests/test_macro_parser.py::test_complex_macro - converter.p...
FAILED converter/tests/test_macro_parser.py::test_invalid_macro_settings - As...
FAILED converter/tests/test_macro_parser.py::test_nested_macros - Failed: DID...
FAILED converter/tests/test_macro_parser.py::test_parameterized_macro - conve...
FAILED converter/tests/test_macro_parser_edge_cases.py::test_complex_binding_formats
FAILED converter/tests/test_macro_parser_edge_cases.py::test_error_recovery
FAILED converter/tests/test_macro_parser_edge_cases.py::test_state_transitions
FAILED converter/tests/test_macro_parser_edge_cases.py::test_invalid_state_transitions
FAILED converter/tests/test_parser_debug.py::test_layer_pattern_matching - At...
FAILED converter/tests/test_parser_debug.py::test_row_splitting - AttributeEr...
FAILED converter/tests/test_parser_debug.py::test_key_mapping_creation - Valu...
FAILED converter/tests/test_parser_debug.py::test_global_pattern_matching - A...
FAILED converter/tests/test_taphold_keymap.py::TestTapHoldKeymap::test_parse_hold_tap_binding
FAILED converter/tests/test_unicode_integration.py::TestUnicodeIntegration::test_unicode_conversion
FAILED converter/tests/unit/parser/test_binding_parser.py::test_layer_tap - V...
FAILED converter/tests/unit/parser/test_binding_parser.py::test_mod_tap - Val...
FAILED converter/tests/unit/parser/test_binding_parser.py::test_layer_behaviors
FAILED converter/tests/unit/parser/test_binding_parser.py::test_transparent
FAILED converter/tests/unit/parser/test_binding_parser.py::test_nested_bindings
FAILED converter/tests/unit/parser/test_binding_parser.py::test_invalid_bindings
FAILED converter/tests/unit/parser/test_binding_parser.py::test_invalid_nested_bindings
FAILED converter/tests/unit/parser/test_binding_parser.py::test_invalid_parameters
FAILED converter/tests/unit/parser/test_binding_parser.py::test_whitespace_handling
FAILED converter/tests/unit/parser/test_error_recovery_wrapper.py::test_parse_binding_success
FAILED converter/tests/unit/parser/test_error_recovery_wrapper.py::test_parse_binding_value_error
FAILED converter/tests/unit/parser/test_error_recovery_wrapper.py::test_parse_layer_value_error
FAILED converter/tests/unit/parser/test_error_recovery_wrapper.py::test_error_summary
FAILED converter/tests/unit/parser/test_error_recovery_wrapper.py::test_has_errors
FAILED converter/tests/unit/test_complex_bindings.py::test_nested_hold_tap_with_layer
FAILED converter/tests/unit/test_complex_bindings.py::test_hold_tap_with_sticky
FAILED converter/tests/unit/test_complex_bindings.py::test_multi_layer_sequence
FAILED converter/tests/unit/test_complex_bindings.py::test_complex_modifier_chain
FAILED converter/tests/unit/test_complex_bindings.py::test_mixed_case_handling
FAILED converter/tests/unit/test_complex_bindings.py::test_special_key_combinations
FAILED converter/tests/unit/test_complex_bindings.py::test_complex_macro_binding
FAILED converter/tests/unit/test_complex_bindings.py::test_layer_with_empty_slots
FAILED converter/tests/unit/test_error_recovery.py::test_handle_invalid_binding
FAILED converter/tests/unit/test_error_recovery.py::test_handle_invalid_layer
FAILED converter/tests/unit/test_error_recovery.py::test_multiple_errors - Va...
FAILED converter/tests/unit/test_error_recovery.py::test_has_errors - ValueEr...
FAILED converter/tests/unit/test_error_recovery.py::test_error_summary_structure
FAILED converter/tests/unit/test_homerow_mods.py::test_homerow_mod_parser - A...
FAILED converter/tests/unit/test_homerow_mods.py::test_homerow_mod_behavior_kanata_mod
FAILED converter/tests/unit/test_homerow_mods.py::test_homerow_mod_behavior_to_kanata
FAILED converter/tests/unit/test_homerow_mods.py::test_homerow_mod_transformer
FAILED converter/tests/unit/test_pipeline_validator.py::test_validate_output_invalid
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_basic_holdtap_transformations
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_layer_holdtap_transformations
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_special_key_holdtap_transformations
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_timing_parameter_transformations
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_modifier_holdtap_combinations
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_basic_key_mapping
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_layer_in_hold_position
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_nested_holdtap_invalid
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_macro_in_hold_invalid
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_sticky_key_in_tap_invalid
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_key_sequence_in_tap_invalid
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_both_positions_invalid
FAILED converter/tests/unit/transformer/test_holdtap_transformer.py::test_multiple_layers_invalid
FAILED converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py::test_empty_holdtap_transformations
FAILED converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py::test_invalid_timing_parameters
FAILED converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py::test_special_character_holdtap
FAILED converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py::test_mixed_case_transformations
FAILED converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py::test_nested_holdtap_behaviors
FAILED converter/tests/unit/transformer/test_holdtap_transformer_edge_cases.py::test_boundary_timing_values
FAILED converter/tests/unit/transformer/test_layer_transformer.py::test_basic_key_transformations
FAILED converter/tests/unit/transformer/test_layer_transformer.py::test_layer_control_transformations
FAILED converter/tests/unit/transformer/test_layer_transformer.py::test_binding_matrix_transformations
FAILED converter/tests/unit/transformer/test_layer_transformer_edge_cases.py::test_empty_layer_transformation
FAILED converter/tests/unit/transformer/test_layer_transformer_edge_cases.py::test_layer_with_empty_bindings
FAILED converter/tests/unit/transformer/test_layer_transformer_edge_cases.py::test_complex_key_sequences
FAILED converter/tests/unit/transformer/test_layer_transformer_edge_cases.py::test_invalid_key_mappings
FAILED converter/tests/unit/transformer/test_layer_transformer_edge_cases.py::test_layer_name_edge_cases
FAILED converter/tests/unit/transformer/test_layer_transformer_edge_cases.py::test_nested_matrix_transformations
FAILED converter/tests/unit/transformer/test_layer_transformer_edge_cases.py::test_special_character_transformations
FAILED converter/tests/unit/transformer/test_macro_transformer.py::test_transform_definition_invalid_steps
FAILED converter/tests/unit/transformer/test_macro_transformer_edge_cases.py::test_empty_macro_transformations
FAILED converter/tests/unit/transformer/test_macro_transformer_edge_cases.py::test_invalid_timing_parameters
FAILED converter/tests/unit/transformer/test_macro_transformer_edge_cases.py::test_boundary_timing_values
FAILED converter/tests/unit/transformer/test_macro_transformer_edge_cases.py::test_duplicate_keys
FAILED converter/tests/unit/transformer/test_sticky_key_transformer.py::test_basic_sticky_key_transformations
FAILED converter/tests/unit/transformer/test_sticky_key_transformer.py::test_modifier_combinations
FAILED converter/tests/unit/transformer/test_sticky_key_transformer.py::test_special_key_sticky_transformations
FAILED converter/tests/unit/transformer/test_sticky_key_transformer.py::test_layer_sticky_transformations
FAILED converter/tests/unit/transformer/test_sticky_key_transformer.py::test_timing_parameter_transformations
FAILED converter/tests/unit/transformer/test_sticky_key_transformer.py::test_basic_key_sticky_transformations
FAILED converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py::test_empty_sticky_key_transformations
FAILED converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py::test_invalid_timing_parameters
FAILED converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py::test_special_character_sticky_keys
FAILED converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py::test_mixed_case_transformations
FAILED converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py::test_boundary_timing_values
FAILED converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py::test_nested_sticky_behaviors
FAILED converter/tests/unit/transformer/test_sticky_key_transformer_edge_cases.py::test_invalid_key_combinations
ERROR converter/tests/unit/parser/test_ben_vallack_config.py::TestBenVallackConfig::test_parse_custom_behaviors
ERROR converter/tests/unit/parser/test_ben_vallack_config.py::TestBenVallackConfig::test_parse_complex_binding_patterns
ERROR converter/tests/unit/parser/test_ben_vallack_config.py::TestBenVallackConfig::test_parse_nested_modifier_combinations
ERROR converter/tests/unit/parser/test_ben_vallack_config.py::TestBenVallackConfig::test_parse_layer_transitions
ERROR converter/tests/unit/parser/test_ben_vallack_config.py::TestBenVallackConfig::test_parse_non_standard_key_references
ERROR converter/tests/unit/parser/test_ben_vallack_config.py::TestBenVallackConfig::test_parse_full_config
ERROR converter/tests/unit/parser/test_layer_parser.py::test_extract_layers
ERROR converter/tests/unit/parser/test_layer_parser.py::test_parse_zmk_file
ERROR converter/tests/unit/parser/test_layer_parser.py::test_empty_layer
ERROR converter/tests/unit/parser/test_layer_parser.py::test_invalid_layer_syntax
ERROR converter/tests/unit/parser/test_macro_parser.py::test_basic_macro
ERROR converter/tests/unit/parser/test_macro_parser.py::test_parameterized_macro
ERROR converter/tests/unit/parser/test_macro_parser.py::test_invalid_macro_settings[wait-ms = 30;-Invalid setting format-True]
ERROR converter/tests/unit/parser/test_macro_parser.py::test_invalid_macro_settings[tap-ms = <-10>;-Setting value must be positive-False]
ERROR converter/tests/unit/parser/test_macro_parser.py::test_invalid_macro_settings[bindings = kp A;-Invalid bindings line-True]
ERROR converter/tests/unit/parser/test_macro_parser.py::test_nested_macros
ERROR converter/tests/unit/parser/test_macro_parser_edge_cases.py::test_complex_binding_formats
ERROR converter/tests/unit/parser/test_macro_parser_edge_cases.py::test_error_recovery
ERROR converter/tests/unit/parser/test_macro_parser_edge_cases.py::test_state_transitions
ERROR converter/tests/unit/parser/test_macro_parser_edge_cases.py::test_invalid_state_transitions[test: test {-No macros block]
ERROR converter/tests/unit/parser/test_macro_parser_edge_cases.py::test_invalid_state_transitions[inner: inner {-Already parsing a macro]
ERROR converter/tests/unit/parser/test_macro_parser_edge_cases.py::test_invalid_state_transitions[bindings = <&macro_tap &kp A>;-No macro being parsed]
ERROR converter/tests/unit/parser/test_macro_parser_edge_cases.py::test_invalid_state_transitions[wait-ms = <30>;-No macro being parsed]
ERROR converter/tests/unit/parser/test_taphold_parser.py::test_basic_holdtap_properties
ERROR converter/tests/unit/parser/test_taphold_parser.py::test_full_configuration
ERROR converter/tests/unit/parser/test_taphold_parser.py::test_advanced_features
ERROR converter/tests/unit/parser/test_taphold_parser.py::test_partial_configuration
ERROR converter/tests/unit/parser/test_taphold_parser.py::test_real_world_example
ERROR converter/tests/unit/parser/test_taphold_parser_edge_cases.py::test_key_positions_with_commas
ERROR converter/tests/unit/parser/test_taphold_parser_edge_cases.py::test_invalid_key_positions
ERROR converter/tests/unit/parser/test_taphold_parser_edge_cases.py::test_invalid_flavor
ERROR converter/tests/unit/parser/test_taphold_parser_edge_cases.py::test_invalid_behavior
ERROR converter/tests/unit/parser/test_taphold_parser_edge_cases.py::test_missing_required_fields
ERROR converter/tests/unit/parser/test_taphold_parser_edge_cases.py::test_invalid_field_values[tapping-term-ms-<-100>-must be positive]
ERROR converter/tests/unit/parser/test_taphold_parser_edge_cases.py::test_invalid_field_values[quick-tap-ms-<0>-must be positive]
ERROR converter/tests/unit/parser/test_taphold_parser_edge_cases.py::test_invalid_field_values[require-prior-idle-ms-<-50>-must be positive]
ERROR converter/tests/unit/parser/test_taphold_parser_edge_cases.py::test_invalid_field_values[flavor-"invalid"-Invalid flavor]
ERROR converter/tests/unit/parser/test_taphold_parser_edge_cases.py::test_invalid_field_values[bindings-<&invalid>-Invalid binding format]
ERROR converter/tests/unit/test_pipeline_validator.py::test_validate_intermediate_representation
ERROR converter/tests/unit/test_pipeline_validator.py::test_validate_pipeline
193 failed, 130 passed, 1 skipped, 40 errors in 0.61s
