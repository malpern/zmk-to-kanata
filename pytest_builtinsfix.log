============================= test session starts ==============================
platform darwin -- Python 3.10.16, pytest-8.3.5, pluggy-1.5.0
rootdir: /Volumes/FlashGordon/Dropbox/code/nicktokatana
configfile: pyproject.toml
testpaths: tests
collected 137 items

tests/dts/test_ast.py .....                                              [  3%]
tests/dts/test_end_to_end.py ...F.F                                      [  8%]
tests/dts/test_extractor.py .....                                        [ 11%]
tests/dts/test_integration.py .....                                      [ 15%]
tests/dts/test_parser.py .............                                   [ 24%]
tests/dts/test_performance.py ....                                       [ 27%]
tests/dts/test_preprocessor.py ...........                               [ 35%]
tests/test_dts_parser.py ..............                                  [ 45%]
tests/test_dts_preprocessor.py ...                                       [ 48%]
tests/test_hold_tap_behavior.py ......                                   [ 52%]
tests/test_holdtap_transformer.py ..........                             [ 59%]
tests/test_kanata_converter.py .............                             [ 69%]
tests/test_kanata_edge_cases.py ....F.                                   [ 73%]
tests/test_kanata_home_row_mods.py .                                     [ 74%]
tests/test_keymap_model.py ..........                                    [ 81%]
tests/test_main.py .......                                               [ 86%]
tests/test_regression_real_world.py ss....                               [ 91%]
tests/test_sticky_key_transformer.py ....                                [ 94%]
tests/test_unicode_behavior.py ........                                  [100%]

=================================== FAILURES ===================================
_____________________________ test_error_handling ______________________________

    def test_error_handling():
        """Test error handling with malformed input."""
        # Test missing root node
        with pytest.raises(DtsParseError, match="DTS must start with root node"):
            parser = DtsParser()
            parser.parse("keymap { };")
    
        # Test invalid property assignment
        with pytest.raises(DtsParseError, match="Invalid property value"):
            parser = DtsParser()
            parser.parse(
                """
            / {
                keymap {
                    prop = value
                };
            };
            """
            )
    
        # Test invalid binding format
        parser = DtsParser()
        ast = parser.parse(
            """
        / {
            keymap {
                default_layer {
                    bindings = <&invalid_binding>;
                };
            };
        };
        """
        )
        extractor = KeymapExtractor()
>       with pytest.raises(
            ValueError, match="Unknown behavior referenced during binding creation"
        ):
E       Failed: DID NOT RAISE <class 'ValueError'>

tests/dts/test_end_to_end.py:263: Failed
----------------------------- Captured stdout call -----------------------------
Added layer default_layer: Layer(name='default_layer', bindings=[Binding(behavior=None, params=['TODO: Unknown behavior referenced during binding creation: invalid_binding'])], index=0)
------------------------------ Captured log call -------------------------------
ERROR    root:parser.py:75 DTS must start with root node '/' (first token: 'keymap')
ERROR    root:parser.py:694 Parse error for property 'prop': Invalid property value: value at line 3, column 1

1 |         / {
2 |             keymap {
3 |                 prop = value
  | ^
4 |             };
5 |         };

Help: Property values must be strings, integers, arrays, or booleans
ERROR    root:parser.py:198 Parse error: Invalid property value: value at line 3, column 1

1 |         / {
2 |             keymap {
3 |                 prop = value
  | ^
4 |             };
5 |         };

Help: Property values must be strings, integers, arrays, or booleans
WARNING  root:extractor.py:561 TODO: Unknown behavior referenced during binding creation: invalid_binding
_____________________ test_keymap_with_conditional_layers ______________________

    def test_keymap_with_conditional_layers():
        """Test parsing a keymap with conditional layers."""
        content = """
        / {
            conditional_layers {
                compatible = "zmk,conditional-layers";
                tri_layer {
                    if-layers = <1 2>;
                    then-layer = <3>;
                };
            };
            keymap {
                compatible = "zmk,keymap";
                default_layer {
                    bindings = <&kp A &kp B>;
                };
                lower_layer {
                    bindings = <&kp N1 &kp N2>;
                };
                raise_layer {
                    bindings = <&kp F1 &kp F2>;
                };
                adjust_layer {
                    bindings = <&reset &bootloader>;
                };
            };
        };
        """
        # Parse and extract
        parser = DtsParser()
        ast = parser.parse(content)
        extractor = KeymapExtractor()
        config = extractor.extract(ast)
        # Assert that 'reset' and 'bootloader' behaviors are present
        behavior_names = [b.name for b in config.behaviors.values()]
>       assert "reset" in behavior_names
E       AssertionError: assert 'reset' in []

tests/dts/test_end_to_end.py:356: AssertionError
----------------------------- Captured stdout call -----------------------------
Added conditional layer tri_layer: ConditionalLayer(name='tri_layer', if_layers=[1, 2], then_layer=3)
Added layer default_layer: Layer(name='default_layer', bindings=[Binding(behavior=None, params=['A']), Binding(behavior=None, params=['B'])], index=0)
Added layer lower_layer: Layer(name='lower_layer', bindings=[Binding(behavior=None, params=['N1']), Binding(behavior=None, params=['N2'])], index=1)
Added layer raise_layer: Layer(name='raise_layer', bindings=[Binding(behavior=None, params=['F1']), Binding(behavior=None, params=['F2'])], index=2)
Added layer adjust_layer: Layer(name='adjust_layer', bindings=[Binding(behavior=None, params=['TODO: Unknown behavior referenced during binding creation: reset']), Binding(behavior=None, params=['TODO: Unknown behavior referenced during binding creation: bootloader'])], index=3)
------------------------------ Captured log call -------------------------------
WARNING  root:extractor.py:561 TODO: Unknown behavior referenced during binding creation: reset
WARNING  root:extractor.py:561 TODO: Unknown behavior referenced during binding creation: bootloader
___________________________ test_tapdance_hold_todo ____________________________

    def test_tapdance_hold_todo():
        """Test tap-dance with hold-action emits a TODO and doc link."""
        kanata = parse_and_transform(ZMK_TAPDANCE_HOLD)
>       assert "TODO" in kanata and "tap-dance" in kanata
E       AssertionError: assert ('TODO' in '(defcfg\n  kb (kb () () )\n  kbd (kbd ())\n)\n\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default_layer\n  (tap-dance 200 a b)\n)')

tests/test_kanata_edge_cases.py:152: AssertionError
----------------------------- Captured stdout call -----------------------------
Added layer default_layer: Layer(name='default_layer', bindings=[Binding(behavior=Behavior(name='td', type='zmk,behavior-tap-dance'), params=['A', 'B'])], index=0)
=========================== short test summary info ============================
FAILED tests/dts/test_end_to_end.py::test_error_handling - Failed: DID NOT RA...
FAILED tests/dts/test_end_to_end.py::test_keymap_with_conditional_layers - As...
FAILED tests/test_kanata_edge_cases.py::test_tapdance_hold_todo - AssertionEr...
=================== 3 failed, 132 passed, 2 skipped in 1.31s ===================
