============================= test session starts ==============================
platform darwin -- Python 3.10.16, pytest-8.3.5, pluggy-1.5.0
rootdir: /Volumes/FlashGordon/Dropbox/code/nicktokatana
configfile: pyproject.toml
testpaths: tests
collected 137 items

tests/dts/test_ast.py .....                                              [  3%]
tests/dts/test_end_to_end.py ......                                      [  8%]
tests/dts/test_extractor.py .....                                        [ 11%]
tests/dts/test_integration.py .....                                      [ 15%]
tests/dts/test_parser.py .............                                   [ 24%]
tests/dts/test_performance.py ....                                       [ 27%]
tests/dts/test_preprocessor.py ...........                               [ 35%]
tests/test_dts_parser.py ..............                                  [ 45%]
tests/test_dts_preprocessor.py ...                                       [ 48%]
tests/test_hold_tap_behavior.py ......                                   [ 52%]
tests/test_holdtap_transformer.py ..........                             [ 59%]
tests/test_kanata_converter.py .............                             [ 69%]
tests/test_kanata_edge_cases.py FFFFFF                                   [ 73%]
tests/test_kanata_home_row_mods.py .                                     [ 74%]
tests/test_keymap_model.py ..........                                    [ 81%]
tests/test_main.py .......                                               [ 86%]
tests/test_regression_real_world.py ssFF..                               [ 91%]
tests/test_sticky_key_transformer.py ....                                [ 94%]
tests/test_unicode_behavior.py ........                                  [100%]

=================================== FAILURES ===================================
___________________________ test_complex_combo_todo ____________________________

    def test_complex_combo_todo():
        """Test that complex combos emit a TODO or unsupported comment."""
        kanata = parse_and_transform(ZMK_COMPLEX_COMBO)
>       assert "unsupported: combo 'combo1'" in kanata
E       assert "unsupported: combo 'combo1'" in '(defcfg\n  input (kb () () )\n  output (kbd ())\n)\n\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default_layer\n  a\n  b\n  c\n)'

tests/test_kanata_edge_cases.py:124: AssertionError
----------------------------- Captured stdout call -----------------------------
Warning: Skipping combo 'combo1' due to missing/invalid properties.
Added layer default_layer: Layer(name='default_layer', bindings=[Binding(behavior=None, params=['A']), Binding(behavior=None, params=['B']), Binding(behavior=None, params=['C'])], index=0)
_______________________________ test_sticky_keys _______________________________

    def test_sticky_keys():
        """Test sticky key behaviors are mapped to one-shot and symbolic names."""
>       kanata = parse_and_transform(ZMK_STICKY_KEYS)

tests/test_kanata_edge_cases.py:130: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/test_kanata_edge_cases.py:117: in parse_and_transform
    keymap = KeymapExtractor().extract(tree)
converter/dts/extractor.py:151: in extract
    self._extract_layers(keymap_node)
converter/dts/extractor.py:404: in _extract_layers
    layer = self._create_layer(child, idx)
converter/dts/extractor.py:423: in _create_layer
    parsed_bindings = self._parse_bindings(bindings_prop.value)
converter/dts/extractor.py:547: in _parse_bindings
    get_or_create_behavior(behavior_name, behavior_name)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'sk_lshift', type_str = 'sk_lshift'

    def get_or_create_behavior(name, type_str):
        if name in self.behaviors:
            return self.behaviors[name]
        if name in BUILTIN_BEHAVIORS:
            if name in ("mt", "hold-tap", "mod-tap"):
                # Register a generic Behavior for now; HoldTap will be created at binding time
                b = Behavior(name=name)
                b.type = "hold-tap"
            else:
                b = Behavior(name=name)
                b.type = BUILTIN_BEHAVIORS[name]
            self.behaviors[name] = b
            return b
>       raise ValueError(
            f"Unknown behavior referenced during binding creation: {name}"
        )
E       ValueError: Unknown behavior referenced during binding creation: sk_lshift

converter/dts/extractor.py:506: ValueError
_____________________________ test_unicode_output ______________________________

    def test_unicode_output():
        """Test Unicode output emits unicode or TODO/warning."""
        kanata = parse_and_transform(ZMK_UNICODE)
>       assert "unicode" in kanata or "WARNING" in kanata or "TODO" in kanata
E       AssertionError: assert ('unicode' in '(defcfg\n  input (kb () () )\n  output (kbd ())\n)\n\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default_layer\n; unsupported: uni_pi  (ZMK: &uni_pi )\n)' or 'WARNING' in '(defcfg\n  input (kb () () )\n  output (kbd ())\n)\n\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default_layer\n; unsupported: uni_pi  (ZMK: &uni_pi )\n)' or 'TODO' in '(defcfg\n  input (kb () () )\n  output (kbd ())\n)\n\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer default_layer\n; unsupported: uni_pi  (ZMK: &uni_pi )\n)')

tests/test_kanata_edge_cases.py:138: AssertionError
----------------------------- Captured stdout call -----------------------------
Added layer default_layer: Layer(name='default_layer', bindings=[Binding(behavior=Behavior(name='uni_pi', type='zmk,behavior-unicode'), params=[])], index=0)
____________________________ test_tapdance_3actions ____________________________

    def test_tapdance_3actions():
        """Test tap-dance with 3 actions emits correct Kanata syntax."""
        kanata = parse_and_transform(ZMK_TAPDANCE_3ACTIONS)
>       assert "(tap-dance 200 a b c)" in kanata
E       assert '(tap-dance 200 a b c)' in "(defcfg\n  input (kb () () )\n  output (kbd ())\n)\n\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer defa... Unsupported/Unknown ZMK Features ---\n  ERROR: [extractor] Invalid hold-tap binding for 'td': params=['A']. Creati..."

tests/test_kanata_edge_cases.py:144: AssertionError
----------------------------- Captured stdout call -----------------------------
Added layer default_layer: Layer(name='default_layer', bindings=[Binding(behavior=None, params=["ERROR: [extractor] Invalid hold-tap binding for 'td': params=['A']. Creating error binding."]), Binding(behavior=None, params=['B']), Binding(behavior=None, params=['C'])], index=0)
------------------------------ Captured log call -------------------------------
WARNING  root:extractor.py:610 [extractor] Invalid hold-tap binding for 'td': params=['A']. Creating error binding.
___________________________ test_tapdance_hold_todo ____________________________

    def test_tapdance_hold_todo():
        """Test tap-dance with hold-action emits a TODO and doc link."""
        kanata = parse_and_transform(ZMK_TAPDANCE_HOLD)
>       assert "TODO" in kanata and "tap-dance" in kanata
E       assert ('TODO' in "(defcfg\n  input (kb () () )\n  output (kbd ())\n)\n\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer defa... Unsupported/Unknown ZMK Features ---\n  ERROR: [extractor] Invalid hold-tap binding for 'td': params=['A']. Creati...")

tests/test_kanata_edge_cases.py:151: AssertionError
----------------------------- Captured stdout call -----------------------------
Added layer default_layer: Layer(name='default_layer', bindings=[Binding(behavior=None, params=["ERROR: [extractor] Invalid hold-tap binding for 'td': params=['A']. Creating error binding."]), Binding(behavior=None, params=['B'])], index=0)
------------------------------ Captured log call -------------------------------
WARNING  root:extractor.py:610 [extractor] Invalid hold-tap binding for 'td': params=['A']. Creating error binding.
_____________________________ test_malformed_macro _____________________________

    def test_malformed_macro():
        """Test malformed macro emits an error and summary section."""
        kanata = parse_and_transform(ZMK_MALFORMED_MACRO)
        assert "ERROR: malformed or unknown macro" in kanata
>       assert "; --- Conversion Summary: TODOs and Errors ---" in kanata
E       AssertionError: assert '; --- Conversion Summary: TODOs and Errors ---' in '(defcfg\n  input (kb () () )\n  output (kbd ())\n)\n\n(defvar tap-time 200)\n(defvar hold-time 250)\n\n(deflayer defa... unknown macro: LSHIFT(\n)\n\n; --- Unsupported/Unknown ZMK Features ---\n  ERROR: malformed or unknown macro: LSHIFT('

tests/test_kanata_edge_cases.py:159: AssertionError
----------------------------- Captured stdout call -----------------------------
Added layer default_layer: Layer(name='default_layer', bindings=[Binding(behavior=None, params=['LSHIFT('])], index=0)
_____ test_no_unsupported_features[tests/fixtures/real_world/card.keymap] ______

zmk_file = 'tests/fixtures/real_world/card.keymap'
generated_outputs = {'tests/fixtures/real_world/card.keymap': PosixPath('/private/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/pytest-o.../folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/pytest-of-malpern/pytest-265/kanata_regression0/piano.keymap.out.kanata')}

    @pytest.mark.parametrize("zmk_file", list(zmk_files()))
    def test_no_unsupported_features(zmk_file, generated_outputs):
        """
        Fail if any line in the generated output contains an unsupported feature or error,
        except for known unsupported features (e.g., Bluetooth).
        """
        KNOWN_UNSUPPORTED = [
            "; unsupported: bt",  # Bluetooth is intentionally unsupported
            "; unsupported: bootloader",  # Bootloader is intentionally unsupported
            "; unsupported: failed to transform layer",  # Layer transform errors are now explicit
            "; unsupported: combo",  # Complex combos are intentionally unsupported
            "; unsupported: hold-tap",  # Unmapped hold-tap properties are intentionally unsupported
        ]
        out_file = generated_outputs[zmk_file]
        with open(out_file) as f:
            for i, line in enumerate(f, 1):
                if line.strip().startswith("; unsupported:") or line.strip().startswith(
                    "; <err:"
                ):
                    # Only fail if not a known unsupported feature
                    if not any(
                        line.strip().startswith(known) for known in KNOWN_UNSUPPORTED
                    ):
>                       pytest.fail(
                            f"{out_file}:{i} contains unsupported feature: "
                            f"{line.strip()}"
                        )
E                       Failed: /private/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/pytest-of-malpern/pytest-265/kanata_regression0/card.keymap.out.kanata:363 contains unsupported feature: ; unsupported: unknown binding: &bootloader

tests/test_regression_real_world.py:88: Failed
_____ test_no_unsupported_features[tests/fixtures/real_world/piano.keymap] _____

zmk_file = 'tests/fixtures/real_world/piano.keymap'
generated_outputs = {'tests/fixtures/real_world/card.keymap': PosixPath('/private/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/pytest-o.../folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/pytest-of-malpern/pytest-265/kanata_regression0/piano.keymap.out.kanata')}

    @pytest.mark.parametrize("zmk_file", list(zmk_files()))
    def test_no_unsupported_features(zmk_file, generated_outputs):
        """
        Fail if any line in the generated output contains an unsupported feature or error,
        except for known unsupported features (e.g., Bluetooth).
        """
        KNOWN_UNSUPPORTED = [
            "; unsupported: bt",  # Bluetooth is intentionally unsupported
            "; unsupported: bootloader",  # Bootloader is intentionally unsupported
            "; unsupported: failed to transform layer",  # Layer transform errors are now explicit
            "; unsupported: combo",  # Complex combos are intentionally unsupported
            "; unsupported: hold-tap",  # Unmapped hold-tap properties are intentionally unsupported
        ]
        out_file = generated_outputs[zmk_file]
        with open(out_file) as f:
            for i, line in enumerate(f, 1):
                if line.strip().startswith("; unsupported:") or line.strip().startswith(
                    "; <err:"
                ):
                    # Only fail if not a known unsupported feature
                    if not any(
                        line.strip().startswith(known) for known in KNOWN_UNSUPPORTED
                    ):
>                       pytest.fail(
                            f"{out_file}:{i} contains unsupported feature: "
                            f"{line.strip()}"
                        )
E                       Failed: /private/var/folders/0s/42v7yl697hn0l1cdnx0vrvyr0000gn/T/pytest-of-malpern/pytest-265/kanata_regression0/piano.keymap.out.kanata:291 contains unsupported feature: ; unsupported: unknown binding: &bootloader

tests/test_regression_real_world.py:88: Failed
=========================== short test summary info ============================
FAILED tests/test_kanata_edge_cases.py::test_complex_combo_todo - assert "uns...
FAILED tests/test_kanata_edge_cases.py::test_sticky_keys - ValueError: Unknow...
FAILED tests/test_kanata_edge_cases.py::test_unicode_output - AssertionError:...
FAILED tests/test_kanata_edge_cases.py::test_tapdance_3actions - assert '(tap...
FAILED tests/test_kanata_edge_cases.py::test_tapdance_hold_todo - assert ('TO...
FAILED tests/test_kanata_edge_cases.py::test_malformed_macro - AssertionError...
FAILED tests/test_regression_real_world.py::test_no_unsupported_features[tests/fixtures/real_world/card.keymap]
FAILED tests/test_regression_real_world.py::test_no_unsupported_features[tests/fixtures/real_world/piano.keymap]
=================== 8 failed, 127 passed, 2 skipped in 1.54s ===================
