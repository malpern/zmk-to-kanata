#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,matrix_transform = &default_transform;
    };

    default_transform: matrix_transform {
        compatible = "zmk,matrix-transform";
        rows = <4>;
        columns = <12>;
        map = <
            RC(0,0)  RC(0,1)  RC(0,2)  RC(0,3)  RC(0,4)  RC(0,5)  RC(0,6)  RC(0,7)  RC(0,8)  RC(0,9)  RC(0,10) RC(0,11)
            RC(1,0)  RC(1,1)  RC(1,2)  RC(1,3)  RC(1,4)  RC(1,5)  RC(1,6)  RC(1,7)  RC(1,8)  RC(1,9)  RC(1,10) RC(1,11)
            RC(2,0)  RC(2,1)  RC(2,2)  RC(2,3)  RC(2,4)  RC(2,5)  RC(2,6)  RC(2,7)  RC(2,8)  RC(2,9)  RC(2,10) RC(2,11)
            RC(3,0)  RC(3,1)  RC(3,2)  RC(3,3)  RC(3,4)  RC(3,5)  RC(3,6)  RC(3,7)  RC(3,8)  RC(3,9)  RC(3,10) RC(3,11)
        >;
    };

    behaviors {
        mt: mod_tap {
            compatible = "zmk,behavior-hold-tap";
            tapping-term-ms = <200>;
            #binding-cells = <2>;
        };
        
        lt: layer_tap {
            compatible = "zmk,behavior-hold-tap";
            tapping-term-ms = <200>;
            #binding-cells = <2>;
        };
        
        macro_a: macro_a {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp A &kp B>;
        };
        
        macro_b: macro_b {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp D>;
        };
        
        unicode: unicode {
            compatible = "zmk,behavior-unicode";
            #binding-cells = <1>;
        };
        
        uc_string: unicode_string {
            compatible = "zmk,behavior-unicode-string";
            #binding-cells = <1>;
            strings = <
                "smile" "😊"
                "heart" "❤️"
            >;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        
        default_layer {
            bindings = <
                &mt LSHIFT A  &kp B        &macro_a     &kp D         &lt 1 E      &kp F
                &kp G         &kp H        &kp I        &kp J         &kp K        &kp L
                &kp M         &kp N        &kp O        &kp P         &kp Q        &kp R
                &kp S         &kp T        &kp U        &kp V         &kp W        &kp X
            >;
        };
        
        lower_layer {
            bindings = <
                &kp N1        &kp N2       &kp N3       &kp N4        &kp N5       &kp N6
                &kp N7        &kp N8       &kp N9       &kp N0        &kp MINUS    &kp EQUAL
                &kp F1        &kp F2       &kp F3       &kp F4        &kp F5       &kp F6
                &kp F7        &kp F8       &kp F9       &kp F10       &kp F11      &kp F12
            >;
        };
        
        raise_layer {
            bindings = <
                &kp EXCLAMATION &kp AT     &kp HASH     &kp DOLLAR    &kp PERCENT  &kp CARET
                &kp AMPERSAND   &kp STAR   &kp LPAR     &kp RPAR      &kp UNDER    &kp PLUS
                &kp F1          &kp F2     &kp F3       &kp F4        &kp F5       &kp F6
                &kp F7          &kp F8     &kp F9       &kp F10       &kp F11      &kp F12
            >;
        };
        
        adjust_layer {
            bindings = <
                &kp RESET      &kp BOOTLOADER &kp NONE  &kp NONE      &kp NONE     &kp NONE
                &kp NONE       &kp NONE       &kp NONE  &kp NONE      &kp NONE     &kp NONE
                &kp NONE       &kp NONE       &kp NONE  &kp NONE      &kp NONE     &kp NONE
                &kp NONE       &kp NONE       &kp NONE  &kp NONE      &kp NONE     &kp NONE
            >;
        };
    };

    combos {
        compatible = "zmk,combos";
        
        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        
        combo_tab {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp TAB>;
        };
        
        combo_enter {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp ENTER>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
}; 